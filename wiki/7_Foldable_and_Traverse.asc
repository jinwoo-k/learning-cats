= 7 Foldable and Traverse
이 챕터에서는 순회을 제공하는 두가지 타입클래스를 살펴볼 것 이다.

* Foldable은 foldLeft, foldRight과 같은 연산을 추상화 한다.
* Traverse는 Applicative들을 folding 보다도 쉽게 순회할 수 있게 해준다.

먼저 Foldable을 먼저 다룬다. 이후 예제와 함께 복잡한 folding 예제 케이스를 다루고, 편리한 Traverse를 살펴본다.

== 7.1 Foldable
Foldable 타입 클래스는 foldLeft, foldRight 메서드를 갖는다. 이는 Lists, Vectors, Streams와 같은 시퀀스에서 사용된다.
Foldable을 사용해 다양한 시퀀스 타입에서 일반적인 folds를 작성할 수 있다. Foldable은 모노이드와 Eval 모나드에서 매우 큰 이점을 갖는다.

=== 7.1.1 Folds and Folding
folding의 일반적인 개념에 대해 상기해보자.

[source,scala]
----
def show[A](list: List[A]): String =
  list.foldLeft("nil")((accum, item) => s"$item then $accum")

show(Nil)
// res0: String = nil

show(List(1, 2, 3))
// res1: String = 3 then 2 then 1 then nil
----

foldLeft 메서드는 순차적 재귀형태로 동작한다. 각각의 아이템에 대해 반복적으로 우리가 정의한 두개의 파라미터를 받는 함수가 호출된다. 이의 결과는 accumulator에 누적되며 다음단계로 이어진다.
시퀀스의 마지막에 도달하면 마지막 accumulator가 최종적인 결과가 된다.

수행하고자 하는 작업에 따라 접는 순서가 중요할 수 있다. 이 때문에 두 가지 표준 구현이 있다.

* foldLeft traverses from “left” to “right” (start to finish)
* foldRight traverses from “right” to “left” (finish to start)

교환법칙이 적용되는 연산의 경우 foldLeft, foldRight가 모두 동일한 결과를 갖지만, 이렇지 않은 경우 두 연산의 결과가 상이하게 된다.

=== 7.1.2 Exercise: Reflecting on Folds

=== 7.1.3 Exercise: Scaf-fold-ing Other Methods

=== 7.1.4 Foldable in Cats
캐츠 Foldable은 타입클래스 내에 foldLeft, foldRight 추상화를 갖는다. 캐츠는 스칼라의 유용한 데이터 타입들 (List, Vector, Stream, Option)에 대해 Foldable 인스턴스를 제공한다.

Foldable.apply를 이용해 인스턴스화 할 수 있으며, 이를 통해 foldLeft메서드를 사용할 수 있다. List에 대한 예를 살펴보자.

[source,scala]
----
import cats.Foldable
import cats.instances.list._ // for Foldable

val ints = List(1, 2, 3)

Foldable[List].foldLeft(ints, 0)(_ + _)
// res1: Int = 6
----

Vector, Stream 같은 다른 시퀀스도 동일하게 동작한다. 아래는 Option에 대한 동작예제이다.

[source,scala]
----
import cats.instances.option._ // for Foldable

val maybeInt = Option(123)

Foldable[Option].foldLeft(maybeInt, 10)(_ * _)
// res3: Int = 1230
----

Foldable의 foldRight는 foldLeft와 다르게 Eval monad를 이용한다.

[source,scala]
----
def foldRight[A, B]
    (fa: F[A], lb: Eval[B])
    (f: (A, Eval[B]) => Eval[B]): Eval[B]
----

Eval을 이용해 stack safe하게 된다. 컬렉션의 기본정의 같은 경우 스택 세이프하지 않은 경우가 있다. 예를들어 Stream의 foldRight가 그리하며, 큰 스트림은 StackOverflowError를 야기한다.

[source,scala]
----
import cats.Eval
import cats.Foldable

def bigData = (1 to 100000).toStream

bigData.foldRight(0L)(_ + _)
// java.lang.StackOverflowError ...


import cats.instances.stream._ // for Foldable

val eval: Eval[Long] =
  Foldable[Stream].
    foldRight(bigData, Eval.now(0L)) { (num, eval) =>
      eval.map(_ + num)
    }

eval.value
// res7: Long = 5000050000
----

==== 7.1.4.2 Folding with Monoids
Foldable은 스탠다드 라이브러리에서 제공하는것과 마찬가지로 다양한 메서드(find, exists, forall, toList, isEmpty, nonEmpty 등)를 제공한다.

[source,scala]
----
Foldable[Option].nonEmpty(Option(42))
// res10: Boolean = true

Foldable[List].find(List(1, 2, 3))(_ % 2 == 0)
// res11: Option[Int] = Some(2)
----

추가로 모노이드를 다루기 위해 두가지 메서드를 제공한다.

* combineAll (and its alias fold) combines all elements in the sequence using their Monoid.
* foldMap maps a user-supplied function over the sequence and combines the results using a Monoid.

[source,scala]
----
import cats.instances.int._ // for Monoid

Foldable[List].combineAll(List(1, 2, 3))
// res12: Int = 6


import cats.instances.string._ // for Monoid

Foldable[List].foldMap(List(1, 2, 3))(_.toString)
// res13: String = 123
----

마지막으로 중첩된 시퀀스를 순회하기 위한 Foldable 결합이 가능하다.

[source,scala]
----
import cats.instances.vector._ // for Monoid

val ints = List(Vector(1, 2, 3), Vector(4, 5, 6))

(Foldable[List] compose Foldable[Vector]).combineAll(ints)
// res15: Int = 21
----


==== 7.1.4.3 Syntax for Foldable
모든 메서드는 cats.syntax.foldable을 통해 syntax로 제공된다.

[source,scala]
----
import cats.syntax.foldable._ // for combineAll and foldMap

List(1, 2, 3).combineAll
// res16: Int = 6

List(1, 2, 3).foldMap(_.toString)
// res17: String = 123
----

TIP: 스칼라에서는 항상 Explicit이 Implicit 보다 우선시 되기 때문에 기본 내장 메서드가 호출되게 된다. Foldable의 메서드가 호출되게 하고 싶은 경우 명시적으로 정의해주면 된다.
stack-safe한 foldRight를 사용하고자 하는 경우 Accumulator로 Eval을 이용해 캣츠 메서드를 이용하도록 컴파일러에게 알려줄 수 있다.
[source,scala]
----

List(1, 2, 3).foldLeft(0)(_ + _)
// res18: Int = 6, List의 기본 구현 사용


// 캐츠의 구현 사용
import scala.language.higherKinds
def sum[F[_]: Foldable](values: F[Int]): Int =
  values.foldLeft(0)(_ + _)
// sum: [F[_]](values: F[Int])(implicit evidence$1: cats.Foldable[F])Int
----
