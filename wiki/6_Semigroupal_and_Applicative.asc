= 6 Semigroupal and Applicative
이전 챕터에서 펑터와 모나드의 map, flatMap을 이용해 순차 연산하는 법에 대해 배웠다. 펑터와 모나드는 매우 유용한 추상이나, 이를 통해 표현하지 못하는 프로그램 흐름이 존재한다.

한가지 예로 form validation을 들 수 있다. 첫번째 에러를 만났을때 중단하는 Either와 같은 모나드와 달리 form에 존재하는 모든 에러를 유저에게 전달하고자 한다.
예로 첫번째 parseInt 호출시 실패하는 상황이다.

[source,scala]
----
import cats.syntax.either._ // for catchOnly

def parseInt(str: String): Either[String, Int] =
  Either.catchOnly[NumberFormatException](str.toInt).
    leftMap(_ => s"Couldn't read $str")

for {
  a <- parseInt("a")
  b <- parseInt("b")
  c <- parseInt("c")
} yield (a + b + c)
// res1: scala.util.Either[String,Int] = Left(Couldn't read a)
----

다른 예로 Future의 동시평가이다. 서로 독립적인 롱-러닝 작업들이 있을때 동시에 실행되는게 타당하다. 하지만 monadic comprehension 은 이들을 순차적 실행만 하게 한다. map, flatMap은 이전작업에 종송성이 있다고 가정하기 때문에 우리가 원하는 바를 달성할 수 없다.

[source,scala]
----
// context2 is dependent on value1:
context1.flatMap(value1 => context2)
----

위와 같이 서로 독립적인 작업을 할때 약한 결합을 위해 이번장에서 새로운 타입 두가지를 살펴볼 것이다.

* Semigroupal은 컨텍스트 페어를 결합하는 개념을 포괄한다. 캐츠는 cats.syntax.apply 모듈을 통해 Semigroupal 과 Functor를 만들 수 있도록 해주고, 이를 통해 순차적 함수와 다양한 인자를 사용할 수 있게 해준다.
* Applicative 는 Semigroupal과 Functor를 상속받는다. 이는 컨텍스트에 포함된 파라미터들에 함수를 적용할 수 있게 한다. Applicative는 4장에서 소개했듯이 pure 메서드의 소스가 된다.

== 6.1 Semigroupal
cats.Semigroupal 은 컨텍스트들을 결합시켜주는 타입 클래스이다. 우리가 F[A], F[B] 두개의 객체를 가진 경우, Semigroupal[F]를 통해 F[(A, B)]형태로 결합할 수 있다.

[source,scala]
----
trait Semigroupal[F[_]] {
  def product[A, B](fa: F[A], fb: F[B]): F[(A, B)]
}
----

이전에 논의했듯이 fa, fb가 서로 독립적일때 우리는 둘을 결합가지 이전에 각각에 대해 계산할 수 있다. 이것이 순서가 중요시되는 flatMap과 대조적인 이유이며, 모나드를 이용할때보다 Semigroupal을 이용할때 높은 자유도를 준다.

=== 6.1.1 Joining Two Contexts
Semigroup은 두개의 값을 결합하며, Seimogroupal은 두개의 컨텍스트를 결합시켜준다. Option을 이용한 예를 보자.

[source,scala]
----
import cats.Semigroupal
import cats.instances.option._ // for Semigroupal

Semigroupal[Option].product(Some(123), Some("abc"))
// res0: Option[(Int, String)] = Some((123,abc))

Semigroupal[Option].product(None, Some("abc"))
// res1: Option[(Nothing, String)] = None

Semigroupal[Option].product(Some(123), None)
// res2: Option[(Int, Nothing)] = None
----

Option의 경우 두 값 모두 Some이어야 Some값을 반환, 그외에는 None 반환

=== 6.1.2 Joining Three or More Contexts
Semigroupal 동반객체에는 product 메서드들이 정의돼 있다. tuple2 부터 tuple22까지 일반적인 product 메서드들이 정의돼 있다.

[source,scala]
----
import cats.instances.option._ // for Semigroupal

Semigroupal.tuple3(Option(1), Option(2), Option(3))
// res3: Option[(Int, Int, Int)] = Some((1,2,3))

Semigroupal.tuple3(Option(1), Option(2), Option.empty[Int])
// res4: Option[(Int, Int, Int)] = None
----

또한 map2 부터 map22까지 의 메서드도 제공한다.

[source,scala]
----
Semigroupal.map3(Option(1), Option(2), Option(3))(_ + _ + _)
// res5: Option[Int] = Some(6)

Semigroupal.map2(Option(1), Option.empty[Int])(_ + _)
// res6: Option[Int] = None
----

그 외에도 Contravariant, Invariant에서 필요로 하는 contramap2~contramap22, imap2~imap22 등이 제공된다.

== 6.2 Apply Syntax
캣츠는 편의를 위해 여러가지 단축 기능을 제공한다. cats.syntax.apply 를 임포트할 수 있다.

[source,scala]
----
import cats.instances.option._ // for Semigroupal
import cats.syntax.apply._     // for tupled and mapN

(Option(123), Option("abc")).tupled
// res7: Option[(Int, String)] = Some((123,abc))

(Option(123), Option("abc"), Option(true)).tupled
// res8: Option[(Int, String, Boolean)] = Some((123,abc,true))
----

추가로 cats는 tupled에 대해 implicit Functor로부터 mapN 메서드를 제공한다.

[source,scala]
----
case class Cat(name: String, born: Int, color: String)

(
  Option("Garfield"),
  Option(1978),
  Option("Orange & black")
).mapN(Cat.apply)
// res9: Option[Cat] = Some(Cat(Garfield,1978,Orange & black))
----

mapN은 내부적으로 Semigroupal을 이용해 Option이나 Functor의 값들을 추출해 function에 적용한다. 이 메서드는 타입 체크 역시 잘 동작한다!

=== 6.2.1 Fancy Functors and Apply Syntax
Contravariant, Invariant 함수를 적용하기 위해 contramapN, imapN 메서드를 제공한다. 다음은 Invariant를 이용한 모노이드 합성예이다.

[source,scala]
----
import cats.implicits._
import cats.Monoid
import cats.instances.boolean._ // for Monoid
import cats.instances.int._     // for Monoid
import cats.instances.list._    // for Monoid
import cats.instances.string._  // for Monoid
import cats.syntax.apply._      // for imapN

case class Cat(
  name: String,
  yearOfBirth: Int,
  favoriteFoods: List[String]
)

val tupleToCat: (String, Int, List[String]) => Cat =
  Cat.apply _

val catToTuple: Cat => (String, Int, List[String]) =
  cat => (cat.name, cat.yearOfBirth, cat.favoriteFoods)

implicit val catMonoid: Monoid[Cat] = (
  Monoid[String],
  Monoid[Int],
  Monoid[List[String]]
).imapN(tupleToCat)(catToTuple)
----

Cat 모노이드는 empty Cat을 만들거나, 두개의 Cat을 더할 수 있게 해준다.

[source,scala]
----
import cats.syntax.semigroup._ // for |+|

val garfield   = Cat("Garfield", 1978, List("Lasagne"))
val heathcliff = Cat("Heathcliff", 1988, List("Junk Food"))

garfield |+| heathcliff
// res17: Cat = Cat(GarfieldHeathcliff,3966,List(Lasagne, Junk Food))
----

== 6.3 Semigroupal Applied to Different Types
Semigroupal은 항상 우리가 생각한대로 동작하진 않는다. 몇가지 타입에 대해 예를 살펴보자.

*Future*

[source,scala]
----
import cats.Semigroupal
import cats.instances.future._ // for Semigroupal
import scala.concurrent._
import scala.concurrent.duration._
import scala.concurrent.ExecutionContext.Implicits.global
import scala.language.higherKinds

val futurePair = Semigroupal[Future].
  product(Future("Hello"), Future(123))

Await.result(futurePair, 1.second)
// res1: (String, Int) = (Hello,123)
----

위의 예에서 Future 객체의 선언과 동시에 실행되며, product 가 호출되는 시점에는 이미 완료된다. 또한 이 결과를 zip을 apply 메서드에 활용할 수 있다.
[source,scala]
----
import cats.syntax.apply._ // for mapN

case class Cat(
  name: String,
  yearOfBirth: Int,
  favoriteFoods: List[String]
)

val futureCat = (
  Future("Garfield"),
  Future(1978),
  Future(List("Lasagne"))
).mapN(Cat.apply)

Await.result(futureCat, 1.second)
// res4: Cat = Cat(Garfield,1978,List(Lasagne))
----

*List*

Semigroupal을 이용한 List들의 결합은 예상치 못한 결과를 낸다. List들의 zip 결괄르 가질거라 예상하지만 카르테시안 프로덕트 결과를 갖는다.

[source,scala]
----
import cats.Semigroupal
import cats.instances.list._ // for Semigroupal

Semigroupal[List].product(List(1, 2), List(3, 4))
// res5: List[(Int, Int)] = List((1,3), (1,4), (2,3), (2,4))
----

*Either*

이번장을 시작하며 Fail-fast vs Accumulating error-handing 에 대해 다루었다. 이에 Either의 결과가 accumulating error-handling과 비슷할꺼라 예상하지만, 예상과 달리 product는 fail-fast와 동일하게 동작한다.

[source,scala]
----
import cats.instances.either._ // for Semigroupal

type ErrorOr[A] = Either[Vector[String], A]

Semigroupal[ErrorOr].product(
  Left(Vector("Error 1")),
  Left(Vector("Error 2"))
)
// res7: ErrorOr[(Nothing, Nothing)] = Left(Vector(Error 1))
----

위의 예에서 product의 결과는 fail-fast이다. 하지만 두번째 파라미터와 이 또한 실패했는지 관찰할 수 있다.

=== 6.3.1 Semigroupal Applied to Monads
List와 Monad의 결과를 예상치 못한 이유는 두개 모두 모나드 이며, 일관성을 유지하기 위함이다. (Monad는 Semigroupal을 상속한다.) product는 map, flatMap의 정의를 그대로 이어받는다.
의미의 일관성은 높은 추상화 수준에서 매우 중요하다.

이전에 살펴본 Future의 경우 product 메서드 호출 전 평가가 먼저 이러나기 때문에 약간의 트릭이 있다. 사실은 아래와 같이 flatMap을 활용하는 것과 동일하다.

[source,scala]
----
val a = Future("Future 1")
val b = Future("Future 2")

for {
  x <- a
  y <- b
} yield (x, y)
----

그럼에도 불구하고 Semigroupal이 중요한 이유는 모나드 외의 타입에 대해서도 적용 가능한 부분이 있기 때문이며, product의 꽁짜 구현을 얻기 위함이다.

=== 6.3.1.1 Exercise: The Product of Monads
flatMap을 활용한 product 구현하기

[source,scala]
----
import cats.Monad

def product[M[_]: Monad, A, B](x: M[A], y: M[B]): M[(A, B)] = {
  for {
    xx <- x
    yy <- y
  } yield (xx, yy)
}
----


== 6.4 Validated
이제 Either 가 fail-fast 하는 이유에 대해 알 수 있게 됐다. 추가로 Either는 모나드이며, 모나드의 경우 product가 flatMap과 동일한 의미를 갖는다는걸 안다. 이로인해 monadic 데이터 타입의 경우 두 메서드간의 일관성 파괴 없이 에러 누적 의미를 갖게 할 수 없다.

다행히도 Moand 데이터 타입이 아닌 Semigroupal 데이터 타입의 인스턴스로 Validate를 제공한다.

[source,scala]
----
import cats.Semigroupal
import cats.data.Validated
import cats.instances.list._ // for Monoid

type AllErrorsOr[A] = Validated[List[String], A]

Semigroupal[AllErrorsOr].product(
  Validated.invalid(List("Error 1")),
  Validated.invalid(List("Error 2"))
)
// res1: AllErrorsOr[(Nothing, Nothing)] = Invalid(List(Error 1, Error 2))
----

=== 6.4.1 Creating Instances of Validated
Validate는 Either의 Right, Left와 대응되는 Validate.Valid, Validate.Invalid 두가지 subtype을 가지며 apply메서드를 통해 생성 가능하다.

[source,scala]
----
val v = Validated.Valid(123)
// v: cats.data.Validated.Valid[Int] = Valid(123)

val i = Validated.Invalid(List("Badness"))
// i: cats.data.Validated.Invalid[List[String]] = Invalid(List(Badness))
----

하지만 상위 데이터 타입을 돌려주는 스마트 컨스트럭터를 이용하는쪽이 더 편리하다.

[source,scala]
----
val v = Validated.valid[List[String], Int](123)
// v: cats.data.Validated[List[String],Int] = Valid(123)

val i = Validated.invalid[List[String], Int](List("Badness"))
// i: cats.data.Validated[List[String],Int] = Invalid(List(Badness))
----

세번째 방법으로 syntax 를 활용하는 방법이 있다.

[source,scala]
----
import cats.syntax.validated._ // for valid and invalid

123.valid[List[String]]
// res2: cats.data.Validated[List[String],Int] = Valid(123)

List("Badness").invalid[Int]
// res3: cats.data.Validated[List[String],Int] = Invalid(List(Badness))
----

네번째 방법은 cats.syntax.applicative 와 cats.syntax.applicativeError에 정의된 방법으로 pure 와 raiseError 를 활용하는 방법이다.

[source,scala]
----
import cats.syntax.applicative._      // for pure
import cats.syntax.applicativeError._ // for raiseError

type ErrorsOr[A] = Validated[List[String], A]

123.pure[ErrorsOr]
// res5: ErrorsOr[Int] = Valid(123)

List("Badness").raiseError[ErrorsOr, Int]
// res6: ErrorsOr[Int] = Invalid(List(Badness))
----

마지막으로 예외가 발생한 상황을 캐치하는 방법이 있다.

[source,scala]
----
Validated.catchOnly[NumberFormatException]("foo".toInt)
// res7: cats.data.Validated[NumberFormatException,Int] = Invalid(java.lang.NumberFormatException: For input string: "foo")

Validated.catchNonFatal(sys.error("Badness"))
// res8: cats.data.Validated[Throwable,Nothing] = Invalid(java.lang.RuntimeException: Badness)

Validated.fromTry(scala.util.Try("foo".toInt))
// res9: cats.data.Validated[Throwable,Int] = Invalid(java.lang.NumberFormatException: For input string: "foo")

Validated.fromEither[String, Int](Left("Badness"))
// res10: cats.data.Validated[String,Int] = Invalid(Badness)

Validated.fromOption[String, Int](None, "Badness")
// res11: cats.data.Validated[String,Int] = Invalid(Badness)
----

=== 6.4.2 Combining Instances of Validated
Validated의 인스턴스는 Semigroupal에 정의된 메서드를 이용해 결합할 수 있다.

[source,scala]
----
type AllErrorsOr[A] = Validated[String, A]

import cats.instances.string._ // for Semigroup

Semigroupal[AllErrorsOr]
// res13: cats.Semigroupal[AllErrorsOr] = cats.data.ValidatedInstances$$anon$1@7be29203
----

Semigroupal을 호출할때는 해당 스코프내에 implicit을 적절히 선언하는게 중요하다.

[source,scala]
----
import cats.syntax.apply._ // for tupled

(
  "Error 1".invalid[Int],
  "Error 2".invalid[Int]
).tupled
// res14: cats.data.Validated[String,(Int, Int)] = Invalid(Error 1Error 2)


import cats.instances.vector._ // for Semigroupal

(
  Vector(404).invalid[Int],
  Vector(500).invalid[Int]
).tupled
// res15: cats.data.Validated[scala.collection.immutable.Vector[Int],(Int, Int)] = Invalid(Vector(404, 500))
----

cats.data 에 정의된 NonEmptyList, NonEmptyVector를 활용하면 원인을 남기지 않고 에러가 발생하는 상황을 피할 수 있다.

[source,scala]
----
import cats.data.NonEmptyVector

(
  NonEmptyVector.of("Error 1").invalid[Int],
  NonEmptyVector.of("Error 2").invalid[Int]
).tupled
// res16: cats.data.Validated[cats.data.NonEmptyVector[String],(Int, Int)] = Invalid(NonEmptyVector(Error 1, Error 2))
----

컴파일러가 올바른 유형의 Semigroupal을 호출 할 수있는 범위에 모든 implicit을 가지고있는 한, 우리는 우리가 원했던 것처럼 apply 구문이나 다른 Semigroupal 메서드를 사용하여 오류를 누적 할 수 있다.

=== 6.4.3 Methods of Validated
Validate는 Either와 매우 비슷하게 여러가지 메서드를 제공한다.

[source,scala]
----
123.valid.map(_ * 100)
// res17: cats.data.Validated[Nothing,Int] = Valid(12300)

"?".invalid.leftMap(_.toString)
// res18: cats.data.Validated[String,Nothing] = Invalid(?)

123.valid[String].bimap(_ + "!", _ * 100)
// res19: cats.data.Validated[String,Int] = Valid(12300)

"?".invalid[Int].bimap(_ + "!", _ * 100)
// res20: cats.data.Validated[String,Int] = Invalid(?!)
----

Validated는 모나드가 아니기 때문에 flatMap을 사용할 수 없다. 하지만 toEither, toValidated 메서드를 통해 타입 변경이 가능하다. toValidated 메서드는 cats.syntax.either에 정의되어있음에 유의하자.

[source,scala]
----
import cats.syntax.either._ // for toValidated
// import cats.syntax.either._

"Badness".invalid[Int]
// res21: cats.data.Validated[String,Int] = Invalid(Badness)

"Badness".invalid[Int].toEither
// res22: Either[String,Int] = Left(Badness)

"Badness".invalid[Int].toEither.toValidated
// res23: cats.data.Validated[String,Int] = Invalid(Badness)
----

flatMap을 활용하기 위해서는 임시로 Either로 변환해주는 withEither 메서드를 활용하면 된다.

[source,scala]
----
41.valid[String].withEither(_.flatMap(n => Right(n + 1)))
// res24: cats.data.Validated[String,Int] = Valid(42)

"!".invalid[Int].withEither(_.flatMap(n => Right(n + 1)))
// res25: cats.data.Validated[String,Int] = Invalid(!)
----

또한 ensure를 통해 특정 값이 나옴을 보장 할 수 있다.

[source,scala]
----
123.valid[String].ensure("Negative!")(_ > 0)
// res32: cats.data.Validated[String,Int] = Valid(123)

(-123).valid[String].ensure("Negative!")(_ > 0)
// res33: cats.data.Validated[String,Int] = Invalid(Negative!)
----

마지막으로 getOrElse, fold 기능을 통해 최종적인 값을 얻을 수 있다.

[source,scala]
----
"fail".invalid[Int].getOrElse(0)
// res26: Int = 0

"fail".invalid[Int].fold(_ + "!!!", _.toString)
// res27: String = fail!!!
----

=== 6.4.4 Exercise: Form Validation
단순 HTML을 이용한 계정등록 폼에 Validated를 이용해보자. 클라이언트로부터 Map[String, String]에 받은 데이터를 User 객체로 파싱하자.

[source,scala]
----
case class User(name: String, age: Int)
----

파싱 규칙

* the name and age must be specified
* the name must not be blank
* the age must be a valid non-negative integer
*

모든 규칙을 만족하는 경우 User객체를 반환, 그렇지 않은 경우 어긴 룰에 대한 목록을 에러메시지로 반환하자.

이를 구현하는 방법으로 Eiter를 활용한 순차적이며 fail-fast한 방법이 있고, Validated를 이용하는 병렬적이며 누적적인 방법이 있다.

먼저 순차조합으로 시작해보자. name, age를 파싱하기 위핸 메서드 readName, readAge를 먼저 구현하자.

[source,scala]
----
import cats.syntax.either._ // for catchOnly
import cats.data.Validated

def getValue(fieldName: String)(map: Map[String, String]): Either[List[String], String] =
  map.get(fieldName)
    .toRight(List(s"$fieldName 필드를 찾을 수 없습니다."))

val getName = getValue("name")_
getName(Map())

getName(Map("name" -> "jason"))

def parseInt(name: String)(data: String): Either[List[String], Int] =
  Validated
    .catchOnly[NumberFormatException](data.toInt)
    .leftMap(_ => List(s"$name 필드는 숫자형태여야 합니다."))
    .toEither

def nonBlank(name: String)(data: String): Either[List[String], String] =
  Right(data).ensure(List(s"$name 은 공백이 아니어야 합니다."))(!_.isEmpty)

def nonNegative(name: String)(data: Int): Either[List[String], Int] =
  Right(data).ensure(List(s"$name 은 양수여야 합니다.."))(0 < _)


def readName(map: Map[String, String]): Either[List[String], String] =
  getName(map).flatMap(name => nonBlank("name")(name))

def readAge(map: Map[String, String]): Either[List[String], Int] =
  getValue("age")(map)
    .flatMap(age => parseInt("age")(age))
    .flatMap(age => nonNegative("age")(age))


case class User(name: String, age: Int)

def readUser(map: Map[String, String]): Either[List[String], User] = {
  for {
    name <- readName(map)
    age <- readAge(map)
  } yield User(name, age)
}

readUser(Map("name" -> "jason", "age" -> "34"))
readUser(Map("name" -> "", "age" -> "34"))
readUser(Map("age" -> "34"))
readUser(Map("name" -> "jason", "age" -> "-34"))
----

Validated를 이용한 구현

[source,scala]
----
import cats.data.Validated
import cats.syntax.either._
import cats.syntax.validated._ // for valid and invalid
import cats.instances.list._ // for Semigroupal
import cats.syntax.apply._   // for mapN

type Fail[A] = Validated[List[String], A]

def getValue(fieldName: String)(map: Map[String, String]): Fail[String] =
  map.get(fieldName)
    .toRight(List(s"$fieldName 필드를 찾을 수 없습니다."))
    .toValidated

val getName = getValue("name")_

def parseInt(name: String)(data: String): Fail[Int] =
  Validated
    .catchOnly[NumberFormatException](data.toInt)
    .leftMap(_ => List(s"$name 필드는 숫자형태여야 합니다."))

def nonBlank(name: String)(data: String): Fail[String] =
  data.valid.ensure(List(s"$name 은 공백이 아니어야 합니다."))(!_.isEmpty)

def nonNegative(name: String)(data: Int): Fail[Int] =
  data.valid.ensure(List(s"$name 은 양수여야 합니다.."))(0 < _)


def readName(map: Map[String, String]): Fail[String] =
  getName(map)
    .withEither(_.flatMap(name => nonBlank("name")(name).toEither))

def readAge(map: Map[String, String]): Fail[Int] =
  getValue("age")(map).withEither {
    _.flatMap(age => parseInt("age")(age).toEither)
      .flatMap(age => nonNegative("age")(age).toEither)
  }

case class User(name: String, age: Int)



def readUser(map: Map[String, String]): Fail[User] = {
  (readName(map), readAge(map)).mapN(User.apply)
}

readUser(Map("name" -> "jason", "age" -> "34"))
readUser(Map("name" -> "", "age" -> "34"))
readUser(Map("age" -> "34"))
readUser(Map("name" -> "jason", "age" -> "-34"))
----

== 6.5 Apply and Applicative
Semigroupal의 경우 Functional programming쪽에서 많이 언급되지 않는다. 이는 Applicative functor(줄여서 applicative)의 서브셋이다.
캐츠는 Applicative에 대한 두가지 모델을 갖는다. 하나는 Semigroupal과 Functor를 상속받고 추가로 ap 메서드를 구현하는 cats.Apply이며, 다른 하나는 Apply를 상속받고 pure를 구현하는 cats.Applicative이다.

간단한 정의는 다음과 같다.

[source,scala]
----
trait Apply[F[_]] extends Semigroupal[F] with Functor[F] {
  def ap[A, B](ff: F[A => B])(fa: F[A]): F[B]

  def product[A, B](fa: F[A], fb: F[B]): F[(A, B)] =
    ap(map(fa)(a => (b: B) => (a, b)))(fb)
}

trait Applicative[F[_]] extends Apply[F] {
  def pure[A](a: A): F[A]
}
----

=== 6.5.1 The Hierarchy of Sequencing Type Classes

.Monad type class hierarchy
image::imgs/6_1.png[,300,200]

모나드의 경우 순차처리가 강제화 된다. 이와 달리 applicative나 semigroupal의 경우 제약이 없다. 이러한 점이 병렬, 독립 계산을 위한 스윗스팟이된다.

데이터 구조에 맞는 semantics를 선택해야 한다. 모나드를 선택했다면 순차처리가 강제되며, applicative를 선택한다면 flatMap 기능을 잃게 된다. 이것이 일관성을 위한 트레이드 오프이다. 이로인해 타입을 선택할때는 신중해야한다.

== 6.6 Summary
모나드와 functor는 순차처리를 위해 가장 많이 사용되는 자료 구조이다. semigroupal과 applicative역시 매우 일반적이다. 이 타입 클래스들은 패션 모나드나 다양한 다른 컴비네이터에 의해 값을 결합하거나 컨텍스트 내부에 함수를 적용하는 일반적인 메카니즘을 제공한다.

Semigroupal과 Applicative는 검증 규칙과 같이 독립된 값들을 결합하는데 가장 많이 사용된다. 캐츠는 Validated 타입을 통해 검증 목적을 달성한다.
