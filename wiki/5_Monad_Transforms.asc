= 5 Monad Transforms
모나드는 부리또와 같이 일단 맛을 보면 계속 찾게 된다. 부리또의 허리에 속을 채우는 것 처럼, 모나드 역시 for-comprehension을 통해 속을 채울 수 있다.

DB에 접속해 user 명칭을 찾는 메서드를 for-comprehension을 통해 풀면 다음과 같다.

[source,scala]
----
def lookupUserName(id: Long): Either[Error, Option[String]] =
  for {
    optUser <- lookupUser(id)
  } yield {
    for { user <- optUser } yield user.name
  }
----

== 5.1 Exercise: Composing Monads
두개의 임의의 모나드가 주어졌을때, 이를 결합해 하나의 모나드로 만들수 있을까? 하지만 두개의 모나드 타입을 모두 모르는 경우 아래와 같이 문제에 봉착하게 된다.

[source,scala]
----
import cats.Monad
import cats.syntax.applicative._ // for pure
import cats.syntax.flatMap._     // for flatMap
import scala.language.higherKinds

// Hypothetical example. This won't actually compile:
def compose[M1[_]: Monad, M2[_]: Monad] = {
  type Composed[A] = M1[M2[A]]

  new Monad[Composed] {
    def pure[A](a: A): Composed[A] =
      a.pure[M2].pure[M1]

    def flatMap[A, B](fa: Composed[A])
        (f: A => Composed[B]): Composed[B] =
      // Problem! How do we write flatMap?
      ???
  }
}
----

하지만 M2를 Option으로 고정하는 경우 다음과 같이 flatMap을 구현 가능하다.

[source,scala]
----
def flatMap[A, B](fa: Composed[A])
    (f: A => Composed[B]): Composed[B] =
  fa.flatMap(_.fold(None.pure[M])(f))
----

위의 예와 같이 Option을 다른 모나드와 결합하기 위해서는 상세한 내용을 알아야 한다.
캐츠는 다양한 모나드에 대해 트랜스포머를 정의해놓았다. 우리는 이를 통해 모나드를 다른 모나드와 결합 가능하다.

== 5.2 A Transformative Example
캐츠는 다양한 모나드 트랜스포머를 제공하며 각 트랜스포머는 모나드 이름뒤에 T가 붙는다. EitherT, OptionT 등

OptionT를 이용해 List와 Option을 결합하는 예제를 보자.

[source,scala]
----
import cats.data.OptionT

type ListOption[A] = OptionT[List, A]

import cats.Monad
import cats.instances.list._     // for Monad
import cats.syntax.applicative._ // for pure

val result1: ListOption[Int] = OptionT(List(Option(10)))
// result1: ListOption[Int] = OptionT(List(Some(10)))

val result2: ListOption[Int] = 32.pure[ListOption]
// result2: ListOption[Int] = OptionT(List(Some(32)))

result1.flatMap { (x: Int) =>
  result2.map { (y: Int) =>
    x + y
  }
}
// res1: cats.data.OptionT[List,Int] = OptionT(List(Some(42)))
----

위의 예제가 바로 모나드 트렌스포머의 특징이다. map과 flatMap을 이용한 결합은 두 모나드를 단계별 재귀적인 unpack, repack 과정 없이 동작하게 해준다.

== 5.3 Monad Transformers in Cats
각각의 모나드 트렌스포머는 데이터타입이며, cats.data에 정의되어 있으며, 이를 통해 모나드 스택으로 새로운 모나드를 만들 수 있다.

모나드 트렌스포머들을 이해하기 위한 주요 컨셉들

* 사용 가능한 모나드 트렌스포머 클래스
* 트랜스포머를 이용한 모나드 스택 빌드
* 모나드 스택의 인스턴스 생성
* 래핑된 모나드를 접근하기 위해 스택을 분리하는 법

=== 5.3.1 The Monad Transformer Classes
캐츠는 편의를 위해 모나드에 대해 모나드 트랜스포머를 만들어 두었다. 사실 많은 모나드는 Id 모나드와의 모나드 트랜스포머를 통해 정의돼 있다.
구체적으로 사용 가능한 인스턴스들은 다음과 같다.

* cats.data.OptionT for Option
* cats.data.EitherT for Either
* cats.data.ReaderT for Reader
* cats.data.WriterT for Writer
* cats.data.StateT for State
* cats.data.IdT for the Id monad

== 5.3.2 Building Monad Stacks
모든 모나드 트렌스포머는 동일한 컨벤션을 따른다. 트랜스포머 자체는 스택의 inner monad를 나타내며,첫번째 타입파라미터는 outer monad를 지정.
남은 두번째 타입파라미터는 모나드를 통해 표현하고자 하는 타입이 들어간다.

예를들어 위에서 작성했던 ListOption의 경우 OptionT[List, A]의 타입 알리아스로, 결과적으로 List[Option[A]] 타입이다.

많은 모나드와 모든 트랜스포머는 최소 두개의 타입 파라미터를 갖는다. 그리고 자주 초기단계에 타입 알리아스를 지정해 사용한다.

한 예로 Option을 Either로 감싸고 싶을 때 inner monad 가 Option 이므로 OptionT 모나드 트랜스포머를 이용한다.
하지만 Either 역시 두개의 파라미터를 가지므로, 우리는 Either 타입을 미리 알리아스로 지정해 사용한다.

[source,scala]
----
// Alias Either to a type constructor with one parameter:
type ErrorOr[A] = Either[String, A]

// Build our final monad stack using OptionT:
type ErrorOrOption[A] = OptionT[ErrorOr, A]
----

ErrorOrOption 역시 ListOption과 마찬가지로 모나드이며, pure, map, flatMap 등의 사용이 간으하다.

[source,scala]
----
import cats.instances.either._ // for Monad

val a = 10.pure[ErrorOrOption]
// a: ErrorOrOption[Int] = OptionT(Right(Some(10)))

val b = 32.pure[ErrorOrOption]
// b: ErrorOrOption[Int] = OptionT(Right(Some(32)))

val c = a.flatMap(x => b.map(y => x + y))
// c: cats.data.OptionT[ErrorOr,Int] = OptionT(Right(Some(42)))
----

세개 혹은 그 이상의 모나드 스택을 이용하면 이해하기 어려워진다.

한예로 Option의 Either의 Future를 만들어보자. 당장 드는 생각은 OptionT의 EitherT의 Future를 만드는 것일 것이다.
하지만 EitherT의 타입파라미터가 세개가 되어 이를 한줄로 작성이 불가능하다.

[source,scala]
----
case class EitherT[F[_], E, A](stack: F[Either[E, A]]) {
  // etc...
}
----

세개의 파라미터는 다음과 같이 구성된다.

* F[_] is the outer monad in the stack (Either is the inner)
* E is the error type for the Either
* A is the result type for the Either

타입 알리아스를 통해 이를 풀어보자

[source,scala]
----
import scala.concurrent.Future
import cats.data.{EitherT, OptionT}

type FutureEither[A] = EitherT[Future, String, A]

type FutureEitherOption[A] = OptionT[FutureEither, A]
----

우리의 맘모스 스택은 이제 세개의 모나드를 결합했고, map, flatMap 사용이 가능하디.

[source,scala]
----
import cats.instances.future._ // for Monad
import scala.concurrent.Await
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration._

val futureEitherOr: FutureEitherOption[Int] =
  for {
    a <- 10.pure[FutureEitherOption]
    b <- 32.pure[FutureEitherOption]
  } yield a + b
----

=== 5.3.3 Constructing and Unpacking Instances
이전에 보았듯이 모나드 트랜스포머의 apply 메서드, 혹은 syntax의 pure 를 통해 트랜스폼된 모나드 스택을 생성할 수 있다.

[source,scala]
----
// Create using apply:
val errorStack1 = OptionT[ErrorOr, Int](Right(Some(10)))
// errorStack1: cats.data.OptionT[ErrorOr,Int] = OptionT(Right(Some(10)))

// Create using pure:
val errorStack2 = 32.pure[ErrorOrOption]
// errorStack2: ErrorOrOption[Int] = OptionT(Right(Some(32)))
----

이후 value 메서드를 통해 unpack 할 수 있다.

[source,scala]
----
// Extracting the untransformed monad stack:
errorStack1.value
// res11: ErrorOr[Option[Int]] = Right(Some(10))

// Mapping over the Either in the stack:
errorStack2.value.map(_.getOrElse(-1))
// res13: scala.util.Either[String,Int] = Right(32)
----

단일 모나드 트랜스포머는 value를 호출하는것으로 unpack 할 수 있다. 하지만 더 큰 스택을 완전히 unpack 하기 위해서는 한번 이상의 호출이 필요하다. 예로 이전에 다뤘던 FutureEitherOption 의 Await 을 살펴보자.

[source,scala]
----
futureEitherOr
// res14: FutureEitherOption[Int] = OptionT(EitherT(Future(Success(Right(Some(42))))))

val intermediate = futureEitherOr.value
// intermediate: FutureEither[Option[Int]] = EitherT(Future(Success(Right(Some(42)))))

val stack = intermediate.value
// stack: scala.concurrent.Future[Either[String,Option[Int]]] = Future(Success(Right(Some(42))))

Await.result(stack, 1.second)
// res15: Either[String,Option[Int]] = Right(Some(42))
----

=== 5.3.4 Default Instances
캐츠의 많은 모나드는 그에 상응하는 트랜스포머와 Id로 정의된다. 그리고 모나드와 모나드 트랜스포머의 API들은 동일하다. Reader, Writer, State 들은 다음과 같이 정의된다.

[source,scala]
----
type Reader[E, A] = ReaderT[Id, E, A] // = Kleisli[Id, E, A]
type Writer[W, A] = WriterT[Id, W, A]
type State[S, A]  = StateT[Id, S, A]
----

다른 경우의 모나드 트랜스포머는 모나드와 별개로 정의된다. 이런 경우 트랜스포머의 메서드는 모나드 메서드의 mirror 역할을 한다. 예로 OptionT 메서드는 getOrElse 메서드를 제공하며, EitherT는 fold, bimap, swap 그외의 여러가지 융요한 메서드들을 갖는다.

=== 5.3.5 Usage Patterns
모나드 트랜스포머의 광범위한 사용은 미리정의된 방식의 모나드 결합으로 이해하기 어려울 수 있다. 신중하게 생각하지 않으면, 서로 다른 컨텍스트에서의 동작을 위해 다른 구성으로 모나드를 unpack, pack해야할 수 있다.

이는 여러 방법으로 처리할 수 있다. 그 중 한가지 접근법은 하나의 ‘슈퍼 스택’을 만들어 코드 베이스 전체에 이용하는 것이다. 이것은 코드가 단순하고 본질적으로 균일 한 경우 작동한다. 예를 들어, 웹 응용 프로그램에서 모든 요청 처리기가 비동기이며 동일한 HTTP 오류 코드 세트로 모두 실패할 수 있다고 결정하는 경우, 오류를 나타내는 사용자 정의 ADT를 설계하고 Future와 Either의 결합을 모든 곳에서 사용할 수 있다.

[source,scala]
----
sealed abstract class HttpError
final case class NotFound(item: String) extends HttpError
final case class BadRequest(msg: String) extends HttpError
// etc...

type FutureEither[A] = EitherT[Future, HttpError, A]
----

‘슈퍼 스택’ 접근법은 서로 다른 컨텍스트에서 서로 다른 스택이 의미가 있는 더 크고 이질적인 코드 기반에서 실패하기 시작한다.
이런 컨텍스트에서는 더 부합하는 다른 디자인 패턴은 모나드 트랜스포머를 로컬 "glue code"로 사용합니다.
모듈의 입/출력은 untransformed 를 활용하고 모듈 내에서만 트랜스폼을 활용한다. 이를 통해 각 코드 모듈은 어떤 트랜스포머를 사용할지에 대한 자체 결정을 내릴 수 있다.

[source,scala]
----
import cats.data.Writer

type Logged[A] = Writer[List[String], A]

// Methods generally return untransformed stacks:
def parseNumber(str: String): Logged[Option[Int]] =
  util.Try(str.toInt).toOption match {
    case Some(num) => Writer(List(s"Read $str"), Some(num))
    case None      => Writer(List(s"Failed on $str"), None)
  }

// Consumers use monad transformers locally to simplify composition:
def addAll(a: String, b: String, c: String): Logged[Option[Int]] = {
  import cats.data.OptionT

  val result = for {
    a <- OptionT(parseNumber(a))
    b <- OptionT(parseNumber(b))
    c <- OptionT(parseNumber(c))
  } yield a + b + c

  result.value
}

// This approach doesn't force OptionT on other users' code:
val result1 = addAll("1", "2", "3")
// result1: Logged[Option[Int]] = WriterT((List(Read 1, Read 2, Read 3),Some(6)))

val result2 = addAll("1", "a", "3")
// result2: Logged[Option[Int]] = WriterT((List(Read 1, Failed on a),None))
----

불행히도 모나드 트랜스포머를 사용함에 있어 모든 경우에 들어맞는 한가지 접근법은 없다. 팀 규모와 경험, 코드 기반의 복잡성 등 다양한 요인에 따라 가장 좋은 접근법을 찾을 수 있다. 모나드 트랜스포머가 적합한지 여부를 결정하기 위해 동료로부터 피드백을 실험하고 수집해야 할 수도 있습니다.

== 5.4 Exercise: Monads: Transform and Roll Out
트랜스포머의 오토봇을 주제로, 두 오토봇이 같은 연합이면서 에너지의 합이 일정량 이상일때 공격할 수 있는 코드를 작성하자.

[source,scala]
----
val powerLevels = Map(
 "Jazz"      -> 6,
 "Bumblebee" -> 8,
 "Hot Rod"   -> 10
)

type Response[A] = EitherT[Future, String, A]

def getPowerLevel(autobot: String): Response[Int] = {
 powerLevels.get(autobot) match {
   case Some(level) => EitherT.right(Future(level))
   case None => EitherT.left(Future(s"$autobot unreachable"))
 }
}

def canSpecialMove(ally1: String, ally2: String): Response[Boolean] = {
 for {
   p1 <- getPowerLevel(ally1)
   p2 <- getPowerLevel(ally2)
 } yield 15 < p1 + p2
}


def tacticalReport(ally1: String, ally2: String): String = {
 val stack = canSpecialMove(ally1, ally2).value

 Await.result(stack, 1.second) match {
   case Left(msg) =>
     s"Comms error: $msg"
   case Right(true)  =>
     s"$ally1 and $ally2 are ready to roll out!"
   case Right(false) =>
     s"$ally1 and $ally2 need a recharge."
 }
}

tacticalReport("Jazz", "Bumblebee")
// res28: String = Jazz and Bumblebee need a recharge.

tacticalReport("Bumblebee", "Hot Rod")
// res29: String = Bumblebee and Hot Rod are ready to roll out!

tacticalReport("Jazz", "Ironhide")
// res30: String = Comms error: Ironhide unreachable
----

== 5.5 Summary
이 장에서는 모나드 트랜스포머를 소개했는데, 이는 중첩된 모나드의 ‘스택’을 작업할 때 for-comprehension과 패턴 매치의 필요성을 제거한다.

FutureT, OptionT 또는 EitherT와 같은 각 모나드 트랜스포머는 관련 모나드를 다른 모나드와 병합하는 데 필요한 코드를 제공한다. 트랜스포머는 모나드 스택을 감싸는 데이터 구조로 전체 스택을 풀고 다시 포장하는 map, flatMap을 제공한다.

모나드 트랜스포머의 타입 서명은 내부에서 외부로 작성된다. 예를들어 EitherT[Option, String, A]는 Option[Either[String]]의 래퍼이다. 여러번 중첩된 모나드의 트랜스포머를 사용할때 type alias는 종종 유용하게 사용된다.

모나드 트랜스포머를 살펴봄으로써 모나드와 flatMap을 이용한 순차 계산에 대해 알아야 할 모든 것을 다 다루었다. 다음 장에서는 두 가지 새로운 타입 클래스인 세미그룹과 어플리케이티브에 대해 논의할 것이다. 이 클래스는 컨텍스트 내에서 독립적인 값을 zipping하는 것과 같은 새로운 종류의 작업을 지원한다.
