== 4.7 The Writer Monad
* cats.data.Writer 는 계산과 함께 로그를 남겨주는 모나드이다. 우리는 메시지, 오류 또는 계산에 대한 추가 데이터를 기록하고 최종 결과와 함께 로그를 추출하는 데 사용할 수 있다.
* 멀티스레드 계산에서 단계별 절차에 대한 로깅 테크닉으로 Writer를 사용한다. 이를 이용하면 결과와 함께 로그가 남게 되며, 동시계산시 로그가 뒤섞이는걸 막을 수 있다.

=== 4.7.1 Creating and Unpacking Writers
* Writer[W, A] 는 로그 타입인 W와 결과 타입인 A로 구성된다.

[source,scala]
----
import cats.data.Writer
import cats.instances.vector._ // for Monoid

Writer(Vector(
  "It was the best of times",
  "it was the worst of times"
), 1859)
// res0: cats.data.WriterT[cats.Id,scala.collection.immutable.Vector[String],Int] = WriterT((Vector(It was the best of times, it was the worst of times),1859))
----

* 위의 결과는 Writer[Vector[String], Int]가 아닌 WriterT[cats.Id, Vector[String], Int] 를 돌려준다.
* type Writer[W, A] = WriterT[Id, W, A]

.로그를 남기지 않을 경우를 위해 pure 메서드가 제공된다.
[source,scala]
----
import cats.instances.vector._   // for Monoid
import cats.syntax.applicative._ // for pure

type Logged[A] = Writer[Vector[String], A]

123.pure[Logged]
// res2: Logged[Int] = WriterT((Vector(),123))
----

.결과가 없고 로그만 필요한 경우 tell 메서드를 이용한다.
[source,scala]
----
import cats.syntax.writer._ // for tell

Vector("msg1", "msg2", "msg3").tell
// res3: cats.data.Writer[scala.collection.immutable.Vector[String],Unit] = WriterT((Vector(msg1, msg2, msg3),()))
----

.로그와 결과가 모두 필요한 경우
[source,scala]
----
import cats.syntax.writer._ // for writer

val a = Writer(Vector("msg1", "msg2", "msg3"), 123)
// a: cats.data.WriterT[cats.Id,scala.collection.immutable.Vector[String],Int] = WriterT((Vector(msg1, msg2, msg3),123))

val b = 123.writer(Vector("msg1", "msg2", "msg3"))
// b: cats.data.Writer[scala.collection.immutable.Vector[String],Int] = WriterT((Vector(msg1, msg2, msg3),123))
----

.결과와 로그는 각각 value 와 written 메서드를 통해 얻을 수 있다. 또한 run 메서드를 통해 둘다 얻을 수 있다.
[source,scala]
----
val aResult: Int = a.value
// aResult: Int = 123

val aLog: Vector[String] = a.written
// aLog: Vector[String] = Vector(msg1, msg2, msg3)

val (log, result) = b.run
// log: scala.collection.immutable.Vector[String] = Vector(msg1, msg2, msg3)
// result: Int = 123
----

=== 4.7.2 Composing and Transforming Writers
.Writer의 로그는 map, flatMap시에 보존된다.
[source,scala]
----
val writer1 = for {
  a <- 10.pure[Logged]
  _ <- Vector("a", "b", "c").tell
  b <- 32.writer(Vector("x", "y", "z"))
} yield a + b
// writer1: cats.data.WriterT[cats.Id,Vector[String],Int] = WriterT((Vector(a, b, c, x, y, z),42))

writer1.run
// res4: cats.Id[(Vector[String], Int)] = (Vector(a, b, c, x, y, z),42)
----

.결과에 대해서는 map, flatMap을 이용해 변환하며, 로그는 mapWritten 메서드를 통해 변환한다.
[source,scala]
----
val writer2 = writer1.mapWritten(_.map(_.toUpperCase))
// writer2: cats.data.WriterT[cats.Id,scala.collection.immutable.Vector[String],Int] = WriterT((Vector(A, B, C, X, Y, Z),42))

writer2.run
// res5: cats.Id[(scala.collection.immutable.Vector[String], Int)] = (Vector(A, B, C, X, Y, Z),42)
----

.결과와 로그를 함께 변환하기 위해서는 bimap와 mapBoth 메서드를 이용한다.
[source,scala]
----
val writer3 = writer1.bimap(
  log => log.map(_.toUpperCase),
  res => res * 100
)
// writer3: cats.data.WriterT[cats.Id,scala.collection.immutable.Vector[String],Int] = WriterT((Vector(A, B, C, X, Y, Z),4200))

writer3.run
// res6: cats.Id[(scala.collection.immutable.Vector[String], Int)] = (Vector(A, B, C, X, Y, Z),4200)

val writer4 = writer1.mapBoth { (log, res) =>
  val log2 = log.map(_ + "!")
  val res2 = res * 1000
  (log2, res2)
}
// writer4: cats.data.WriterT[cats.Id,scala.collection.immutable.Vector[String],Int] = WriterT((Vector(a!, b!, c!, x!, y!, z!),42000))

writer4.run
// res7: cats.Id[(scala.collection.immutable.Vector[String], Int)] = (Vector(a!, b!, c!, x!, y!, z!),42000)
----

.로그를 초기화 하기 위한 reset 메서드와 결과,로그를 전환하는 swap 메서드를 제공한다.
[source,scala]
----
val writer5 = writer1.reset
// writer5: cats.data.WriterT[cats.Id,Vector[String],Int] = WriterT((Vector(),42))

writer5.run
// res8: cats.Id[(Vector[String], Int)] = (Vector(),42)

val writer6 = writer1.swap
// writer6: cats.data.WriterT[cats.Id,Int,Vector[String]] = WriterT((42,Vector(a, b, c, x, y, z)))

writer6.run
// res9: cats.Id[(Int, Vector[String])] = (42,Vector(a, b, c, x, y, z))
----

=== 4.7.3 Exercise: Show Your Working
* factorial 메서드에 로깅 기능을 추가해보자!

[source,scala]
----
def slowly[A](body: => A) =
  try body finally Thread.sleep(100)

def factorial(n: Int): Int = {
  val ans = slowly(if(n == 0) 1 else n * factorial(n - 1))
  println(s"fact $n $ans")
  ans
}
----

.단일 결과
[source,scala]
----
factorial(5)
// fact 0 1
// fact 1 1
// fact 2 2
// fact 3 6
// fact 4 24
// fact 5 120
// res11: Int = 120
----

.멀티 스레드 실행시
[source,scala]
----
import scala.concurrent._
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration._

Await.result(Future.sequence(Vector(
  Future(factorial(3)),
  Future(factorial(3))
)), 5.seconds)
// fact 0 1
// fact 0 1
// fact 1 1
// fact 1 1
// fact 2 2
// fact 2 2
// fact 3 6
// fact 3 6
// res14: scala.collection.immutable.Vector[Int] =
//   Vector(120, 120)
----

.Writer를 이용
[source,scala]
----
def slowly[A](body: => A) =
try body finally Thread.sleep(100)

type Logged2[A] = Writer[Vector[String], A]

def factorial(n: Int): Logged2[Int] = {
  for {
    ans <- {
      if(n == 0)
        1.pure[Logged2]
      else
        slowly(factorial(n - 1).map(_ * n))
    }
    _ <- Vector(s"fact $n $ans").tell
  } yield ans
}

import scala.concurrent._
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration._

val Vector((logA, ansA), (logB, ansB)) =
  Await.result(Future.sequence(Vector(
    Future(factorial(3).run),
    Future(factorial(5).run)
  )), 5.seconds)

// logA: Vector[String] = Vector(fact 0 1, fact 1 1, fact 2 2, fact 3 6)
// ansA: Int = 6
// logB: Vector[String] = Vector(fact 0 1, fact 1 1, fact 2 2, fact 3 6, fact 4 24, fact 5 120)
// ansB: Int = 120
----

== 4.8 The Reader Monad
* cats.data.Reader는 입력에 의존한 순차 연산을 제공한다.
* Reader의 한가지 일반적 용법은 의존성 주입이다. 외부 설정에 의존성이 있는 여러가지 연산이 있을때 Reader를 이용해 그것들을 체인으로 묶어 해당 외부설정을 이용하는 큰 하나의 연산으로 만들 수 있다.

=== 4.8.1 Creating and Unpacking Readers
[source,scala]
----
import cats.data.Reader

case class Cat(name: String, favoriteFood: String)
// defined class Cat

val catName: Reader[Cat, String] = Reader(cat => cat.name)
// catName: cats.data.Reader[Cat,String] = Kleisli(<function1>)

catName.run(Cat("Garfield", "lasagne"))
// res0: cats.Id[String] = Garfield
----

=== 4.8.2 Composing Readers
* 리더의 힘은 map, flatMap 메서드에서 발휘된다. 동일한 설정을 갖는 데이터 타입은 map, flatMap을 통해 결합되며, run 메서드로 해당 설정을 주입한다.

[source,scala]
----
val greetKitty: Reader[Cat, String] =
  catName.map(name => s"Hello ${name}")

greetKitty.run(Cat("Heathcliff", "junk food"))
// res1: cats.Id[String] = Hello Heathcliff
----

.flatMap 메서드는 동일한 입력타입에 의존성을 갖는 Reader를 결합한다.
[source,scala]
----
val feedKitty: Reader[Cat, String] =
  Reader(cat => s"Have a nice bowl of ${cat.favoriteFood}")

val greetAndFeed: Reader[Cat, String] =
  for {
    greet <- greetKitty
    feed  <- feedKitty
  } yield s"$greet. $feed."

greetAndFeed(Cat("Garfield", "lasagne"))
// res3: cats.Id[String] = Hello Garfield. Have a nice bowl of lasagne.

greetAndFeed(Cat("Heathcliff", "junk food"))
// res4: cats.Id[String] = Hello Heathcliff. Have a nice bowl of junk food.
----

=== 4.8.3 Exercise: Hacking on Readers
* Reader의 고전적 사용은 설정을 파라미터로 받는 프로그램을 만드는 것이다. 이를 기반으로하는 간단한 로긴 시스템을 만들자. 우리의 설정은 아래의 두가지 항목으로 구성된다.

[source,scala]
----
case class Db(
  usernames: Map[Int, String],
  passwords: Map[String, String]
)
----

.유저 ID확인과 패스워드 확인
[source,scala]
----
def findUsername(userId: Int): DbReader[Option[String]] =
  Reader(db => db.usernames.get(userId))

def checkPassword(username: String,
                   password: String): DbReader[Boolean] =
  Reader(db => db.passwords.exists { case (user, pw) =>
    user == username && pw == password
  })
----

.위의 두개 메서드를 결합해 로그인 체크
[source,scala]
----
import cats.syntax.applicative._ // for pure
def checkLogin(userId: Int,
                password: String): DbReader[Boolean] =
  for {
    name <- findUsername(userId)
    validPw <- name.map { username =>
      checkPassword(username, password)
    }.getOrElse(false.pure[DbReader])
  } yield validPw
----

.결과확인
[source,scala]
----
val users = Map(
  1 -> "dade",
  2 -> "kate",
  3 -> "margo"
)

val passwords = Map(
  "dade"  -> "zerocool",
  "kate"  -> "acidburn",
  "margo" -> "secret"
)

val db = Db(users, passwords)

checkLogin(1, "zerocool").run(db)
// res10: cats.Id[Boolean] = true

checkLogin(4, "davinci").run(db)
// res11: cats.Id[Boolean] = false

checkLogin(3, "davinci").run(db)
// res11: cats.Id[Boolean] = false
----

=== 4.8.4 When to Use Readers?
* 스칼라에서 Reader는 DI에 활용된다.
* Reader가 사용되는 대표적인 상황은 다음과 같다.
** 함수로 쉽게 표현되는 배치 프로그램 생성
** 파라미터 셋의 주입을 미루고자 할때
** 프로그램의 일부를 독립적으로 테스트 가능하게 하고자 할때

* 프로그램의 단계를 Reader로 구현하면 테스트를 순수함수적으로 테스트 할 수 있고 map, flatMap을 통해 결합할 수도 있다.
* 단, 많은 의존성이 있거나 pure function 으로 표현이 힘든 경우 다른 DI 테크닉이 적합할 수 있다.

== 4.9 The State Monad
cats.data.State를 사용하면 계산의 일부로 추가 상태를 전달할 수 있다.
State 인스턴스는 아토믹 연산을 제공하며, map과 flatMap을 통해 연결한다.
이를 이용하면 mutable 없이 순수 함수 형태로 mutable state를 모델링 가능하다.

=== 4.9.1 Creating and Unpacking State

.State 인스턴스의 가장 간단한 예
[source,scala]
----
import cats.data.State

val a = State[Int, String] { state =>
  (state, s"The state is $state")
}
// a: cats.data.State[Int,String] = cats.data.IndexedStateT@70142af6
----

* State 인스턴스는 두가지 기능을 갖는다.
** input state를 ouput state로 변형
** 결과를 계산

* State는 run, runS, runA 세가지 메서드를 제공한다. 각각의 메서드를 스택에 안전한 Eval 모나드를 결과로 돌려준다. 이는 value 메서드를 통해 실제 결과를 얻게 된다.

[source,scala]
----
// Get the state and the result:
val (state, result) = a.run(10).value
// state: Int = 10
// result: String = The state is 10

// Get the state, ignore the result:
val state = a.runS(10).value
// state: Int = 10

// Get the result, ignore the state:
val result = a.runA(10).value
// result: String = The state is 10
----

=== 4.9.2 Composing and Transforming State
* Reader, Writer와 마찬가지로 인스턴스 결합이 State 모나드의 강점이다.

[source,scala]
----
val step1 = State[Int, String] { num =>
  val ans = num + 1
  (ans, s"Result of step1: $ans")
}
// step1: cats.data.State[Int,String] = cats.data.IndexedStateT@376a962c

val step2 = State[Int, String] { num =>
  val ans = num * 2
  (ans, s"Result of step2: $ans")
}
// step2: cats.data.State[Int,String] = cats.data.IndexedStateT@6be37458

val both = for {
  a <- step1
  b <- step2
} yield (a, b)
// both: cats.data.IndexedStateT[cats.Eval,Int,Int,(String, String)] = cats.data.IndexedStateT@250c2c22

val (state, result) = both.run(20).value
// state: Int = 42
// result: (String, String) = (Result of step1: 21,Result of step2: 42)
----

* State 모나드의 일반적인 모델은 인스턴스로서 계산의 각 단계를 표현하는 것과 스탠다드 모나드 운산자로 단계를 조합하는 것이다. 캐츠는 프리미티브 단계의 생성을 위한 몇가지 편의 생성자를 제공한다.
** get : 결과를 상태로 추출
** set : 상태를 갱신하고 unit을 결과로 반환
** pure : 상태를 무시하고 제공한 값을 결과로 반환
** inspect : transformation 함수를 통해 상태 추출
** modify : update 함수를 통해 상태 갱신

[source,scala]
----
import State._

val program: State[Int, (Int, Int, Int, Int)] = for {
  a <- get[Int]           // (a, a)
  _ <- set[Int](a + 1)    // (a + 1, Unit)
  b <- get[Int]           // (a + 1, a + 1)
  _ <- modify[Int](_ + 1) // (a + 1 + 1, Unit)
  c <- inspect[Int, Int](_ * 1000)  // (a + 1 + 1, (a + 1 + 1) * 1000)
  d <- get[Int]           // (a + 1 + 1, a + 1 + 1)
} yield (a, b, c, d)
// program: cats.data.State[Int,(Int, Int, Int, Int)] = cats.data.IndexedStateT@3b51107e

val (state, result) = program.run(1).value
// state: Int = 3
// result: (Int, Int, Int, Int) = (1,2,3000,3)
----

=== 4.9.3 Exercise: Post-Order Calculator
State 모나드를 이용해 post-order 정수 계산 표현식을 구현해보자.

이는 사람이 읽기는 쉽지만 코드로 평가하기는 쉽다. 스택을 이용해 숫자면 push, 연산자면 두개의 수를 pop 해서 연산하면 된다.
(1 + 2) * 3을 예산하는 경우 아래와 같은 절차로 동작한다.
----
1 2 + 3 * // see 1, push onto stack
2 + 3 *   // see 2, push onto stack
+ 3 *     // see +, pop 1 and 2 off of stack,
          //        push (1 + 2) = 3 in their place
3 3 *     // see 3, push onto stack
3 *       // see 3, push onto stack
*         // see *, pop 3 and 3 off of stack,
          //        push (3 * 3) = 9 in their place
----

[source,scala]
----
import cats.syntax.applicative._
import cats.data.State

type CalcState[A] = State[List[Int], A]

def calc(n1: Int, n2: Int, op: String): Int = op match {
  case "+" => n1 + n2
  case "-" => n1 - n2
  case "*" => n1 * n2
  case "/" => n1 / n2
  case _ => 0
}

def evalOne(sym: String): CalcState[Int] = State[List[Int], Int] { oldStack =>
  if (sym.matches("^\\d+$")) {
    val num = sym.toInt
    (num :: oldStack, num)
  } else {
    val n1 :: n2 :: remain = oldStack
    val res = calc(n1, n2, sym)
    (res :: remain, res)
  }
}

def evalAll(input: List[String]): CalcState[Int] = {
  input.foldLeft(0.pure[CalcState]) { (calcState, str) =>
    calcState.flatMap(_ => evalOne(str))
  }
}

evalOne("42").runA(Nil).value
// res3: Int = 42

val program = evalAll(List("1", "2", "+", "3", "*"))
// program: CalcState[Int] = cats.data.IndexedStateT@2e788ab0

program.runA(Nil).value
// res6: Int = 9


val program = for {
  _   <- evalAll(List("1", "2", "+"))
  _   <- evalAll(List("3", "4", "+"))
  ans <- evalOne("*")
} yield ans
// program: cats.data.IndexedStateT[cats.Eval,List[Int],List[Int],Int] = cats.data.IndexedStateT@55072a57

program.runA(Nil).value
// res7: Int = 21

def evalInput(input: String): Int =
  evalAll(input.split(" ").toList).runA(Nil).value

evalInput("1 2 + 3 4 + *")
// res8: Int = 21
----

== 4.10 Defining Custom Monads
* flatMap, pure, tailRecM을 구현해 커스텀 타입의 모나드를 정의할 수 있다.
.Option의 모나드 구현
[source,scala]
----
import cats.Monad
import scala.annotation.tailrec

val optionMonad = new Monad[Option] {
  def flatMap[A, B](opt: Option[A])
      (fn: A => Option[B]): Option[B] =
    opt flatMap fn

  def pure[A](opt: A): Option[A] =
    Some(opt)

  @tailrec
  def tailRecM[A, B](a: A)
      (fn: A => Option[Either[A, B]]): Option[B] =
    fn(a) match {
      case None           => None
      case Some(Left(a1)) => tailRecM(a1)(fn)
      case Some(Right(b)) => Some(b)
    }
}
----

tailRecM 메서드는 flatMap의 스택공간 소비를 최적화 하기 위한 구현이다.
이 메서드는 최종적으로 fn이 Right를 반화할때까지 재귀호출한다.
캐츠의 모든 모나드는 tailRecM 이 꼬리재귀 형식으로 구현돼 있다.

=== 4.10.1 Exercise: Branching out Further with Monads
.Tree 데이터 타입을 이용한 모나드 작성
[source,scala]
----
import cats.Monad

import scala.annotation.tailrec

sealed trait Tree[+A]

final case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]

final case class Leaf[A](value: A) extends Tree[A]

def branch[A](left: Tree[A], right: Tree[A]): Tree[A] =
  Branch(left, right)

def leaf[A](value: A): Tree[A] =
  Leaf(value)

implicit val treeMonad = new Monad[Tree] {
  override def pure[A](x: A): Tree[A] =
    Leaf(x)

  override def flatMap[A, B](fa: Tree[A])(f: A => Tree[B]): Tree[B] = {
    fa match {
      case Leaf(a) => f(a)
      case Branch(l, r) => Branch(flatMap(l)(f), flatMap(r)(f))
    }
  }

  override def tailRecM[A, B](a: A)(f: A => Tree[Either[A, B]]): Tree[B] = {
    f(a) match {
      case Leaf(e) => e match {
        case Left(l) => tailRecM(l)(f)
        case Right(b) => Leaf(b)
      }
      case Branch(l, r) =>
        Branch(
          flatMap(l) {
            case Left(ll) => tailRecM(ll)(f)
            case Right(lr) => pure(lr)
          },
          flatMap(r) {
            case Left(rl) => tailRecM(rl)(f)
            case Right(rr) => pure(rr)
          }
        )
    }
  }

  def tailRecMStackSafty[A, B](arg: A)(func: A => Tree[Either[A, B]]): Tree[B] = {
    @tailrec
    def loop(
        open: List[Tree[Either[A, B]]],
        closed: List[Tree[B]]): List[Tree[B]] =
      open match {
        case Branch(l, r) :: next =>
          l match {
            case Branch(_, _) =>
              loop(l :: r :: next, closed)
            case Leaf(Left(value)) =>
              loop(func(value) :: r :: next, closed)
            case Leaf(Right(value)) =>
              loop(r :: next, pure(value) :: closed)
          }

        case Leaf(Left(value)) :: next =>
          loop(func(value) :: next, closed)

        case Leaf(Right(value)) :: next =>
          closed match {
            case head :: tail =>
              loop(next, Branch(head, pure(value)) :: tail)
            case Nil =>
              loop(next, pure(value) :: closed)
          }
        case Nil =>
          closed
      }

    loop(List(func(arg)), Nil).head
  }
}

import cats.syntax.functor._ // for map
import cats.syntax.flatMap._ // for flatMap

val res = branch(leaf(100), leaf(200)).
  flatMap(x => branch(leaf(x - 1), leaf(x + 1)))
// res3: wrapper.Tree[Int] = Branch(Branch(Leaf(99),Leaf(101)),Branch(Leaf(199),Leaf(201)))

for {
  a <- branch(leaf(100), leaf(200))
  b <- branch(leaf(a - 10), leaf(a + 10))
  c <- branch(leaf(b - 1), leaf(b + 1))
} yield c
----

Option 모나드는 fail-fast 의미를, List 모나드는 concatenation 의미를 제공한다. 이진 트리에서 flatMap의 의미는 growing 또는 feathering 행위를 나타낸다.

== 4.11 Summary
이 장에서는 모나드의 flatMap 기능에 대해 살펴봤다.
Option은 에러메시지 없이 실패할 수 있는 계산을 표현하며, Either는 실패 메시지를 갖는 계산을, List는 다수의 결과를, Future는 미래에 값을 이용한 계산을 표현한다.

또한 Id, Reader, Writer, State 등 캐츠가 제공하는 커스텀 타입 자료구조도 살펴봤다.

마지막으로 tailRecM을 활용하는 커스텀 모나드를 구현해봤다.
tailRecM은 스택 안전한 함수형 프로그램 라이브러리 작성에 기본적인 요소이다.
모나드를 이해하기 위해 tailRecM을 이해할 필요는 없지만, 모나딕 코드를 작성할때 큰 이점을 준다.
