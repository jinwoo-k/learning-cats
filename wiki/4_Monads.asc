= 4. Monads
* 모나드는 스칼라에서 가장 일반적인 추상화 중 하나로, 모나드라는 이름은 몰라도 직관적으로 익숙한 개념이다.
* 모나드는 생성자와 flatmap 메서드를 갖는다. 기존에 살펴봤던 Option, List, Future 역시 모나이드이다.
* 모나드는 for-comprehension 을 제공한다.
* 스칼라 표준 라이브러리에는 구체화된 타입이 없으며, 캐츠를 통해 얻을 수 있다.

== 4.1 What is a Monad?
* 모나드는 순차적 계산을 위한 메카니즘이다.
* Functor도 순차적 계산을 위해 사용되지만, 복잡한 순차적 접근을 지원하지 않는다.

.Option을 이용한 flatMap 소개
[source,scala]
----
def parseInt(str: String): Option[Int] =
  scala.util.Try(str.toInt).toOption

def divide(a: Int, b: Int): Option[Int] =
  if(b == 0) None else Some(a / b)

def stringDivideBy(aStr: String, bStr: String): Option[Int] =
  parseInt(aStr).flatMap { aNum =>
    parseInt(bStr).flatMap { bNum =>
      divide(aNum, bNum)
    }
  }

stringDivideBy("6", "2")  // res1: Option[Int] = Some(3)
stringDivideBy("6", "0")  // res2: Option[Int] = None
stringDivideBy("6", "foo")  // res3: Option[Int] = None
stringDivideBy("bar", "2")  // res4: Option[Int] = None
----

* 모든 모나드는 Functor 이다. 그리고 flatMap과 map 메서드가 구현돼 있다면 다음과 같이 이용할 수 있다.

.for-comprehension
[source,scala]
----
def stringDivideBy(aStr: String, bStr: String): Option[Int] =
  for {
    aNum <- parseInt(aStr)
    bNum <- parseInt(bStr)
    ans  <- divide(aNum, bNum)
  } yield ans
----

.List
[source,scala]
----
for {
  x <- (1 to 3).toList
  y <- (4 to 5).toList
} yield (x, y)
// res5: List[(Int, Int)] = List((1,4), (1,5), (2,4), (2,5), (3,4), (3,5))
----

.Future
[source,scala]
----
import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent.duration._

def doSomethingLongRunning: Future[Int] = ???
def doSomethingElseLongRunning: Future[Int] = ???

def doSomethingVeryLongRunning: Future[Int] =
  for {
    result1 <- doSomethingLongRunning
    result2 <- doSomethingElseLongRunning
  } yield result1 + result2
----
* 위의 퓨쳐 에제는 순차적으로 실행된다. 즉 result1 의 결과가 나온 이후에서야 두번째 작업이 수행된다.

=== 4.1.1 Definition of a Monad
* Monadic 행동은 아래 두 연산으로 표현된다.
** pure : A => F[A] // 순수값을 모나딕 문맥으로 생성한다.
** flatMap : (F[A], A => F[B]): F[B]

.Cats 에서 모나드 정의
[source,scala]
----
import scala.language.higherKinds

trait Monad[F[_]] {
  def pure[A](value: A): F[A]

  def flatMap[A, B](value: F[A])(func: A => F[B]): F[B]
}
----

.Monad Laws
----
Left identity
  pure(a).flatMap(func) == func(a)

Right identity
  m.flatMap(pure) == m

Associativity
  m.flatMap(f).flatMap(g) == m.flatMap(x => f(x).flatMap(g))
----

=== 4.1.2 Exercise: Getting Func-y

.flatMap와 pure를 이용한 map 메서드 구현
[source,scala]
----
import scala.language.higherKinds

trait Monad[F[_]] {
  def pure[A](a: A): F[A]

  def flatMap[A, B](value: F[A])(func: A => F[B]): F[B]

  def map[A, B](value: F[A])(func: A => B): F[B] =
    flatMap(value)(a => pure(func(a)))
}
----

== 4.2 Monads in Cats
* Monad type class, instances, syntax 에 대해 살펴보자!

=== 4.2.1 The Monad Type Class
* 모나드는 FlatMap 타입클래스로부터 flatMap 메서드를 얻고, Applicative 로부터 pure 메서드를 받는다. 또한 Applicative 는 Functor 를 상속받아 map 메서드를 갖고 있다.

[source,scala]
----
import cats.Monad
import cats.instances.option._ // for Monad
import cats.instances.list._   // for Monad

val opt1 = Monad[Option].pure(3)
// opt1: Option[Int] = Some(3)

val opt2 = Monad[Option].flatMap(opt1)(a => Some(a + 2))
// opt2: Option[Int] = Some(5)

val opt3 = Monad[Option].map(opt2)(a => 100 * a)
// opt3: Option[Int] = Some(500)

val list1 = Monad[List].pure(3)
// list1: List[Int] = List(3)

val list2 = Monad[List].flatMap(List(1, 2, 3))(a => List(a, a*10))
// list2: List[Int] = List(1, 10, 2, 20, 3, 30)

val list3 = Monad[List].map(list2)(a => a + 123)
// list3: List[Int] = List(124, 133, 125, 143, 126, 153)
----

=== 4.2.2 Default Instances
* 캐츠는 스칼라 표준 라이브러리의 모든 모나드 인스턴스를 제공한다. (Option, List, Vector 등)

[source,scala]
----
import cats.instances.option._ // for Monad

Monad[Option].flatMap(Option(1))(a => Option(a*2))
// res0: Option[Int] = Some(2)

import cats.instances.list._ // for Monad

Monad[List].flatMap(List(1, 2, 3))(a => List(a, a*10))
// res1: List[Int] = List(1, 10, 2, 20, 3, 30)

import cats.instances.vector._ // for Monad

Monad[Vector].flatMap(Vector(1, 2, 3))(a => Vector(a, a*10))
// res2: Vector[Int] = Vector(1, 10, 2, 20, 3, 30)
----

* Future 역시 모나드 인스턴스를 제공한다. 하지만 사용하기 위해서는 implicit 으로 ExecutionContext 가 선언돼 있어야 한다.

[source,scala]
----
import cats.instances.future._ // for Monad
import scala.concurrent._
import scala.concurrent.duration._

import scala.concurrent.ExecutionContext.Implicits.global

val fm = Monad[Future]
val future = fm.flatMap(fm.pure(1))(x => fm.pure(x + 2))
Await.result(future, 1.second)
----

=== 4.2.3 Monad Syntax

.pure
[source,scala]
----
import cats.instances.option._   // for Monad
import cats.instances.list._     // for Monad
import cats.syntax.applicative._ // for pure

1.pure[Option]
// res4: Option[Int] = Some(1)

1.pure[List]
// res5: List[Int] = List(1)
----

.flatMap
[source,scala]
----
import cats.Monad
import cats.syntax.functor._ // for map
import cats.syntax.flatMap._ // for flatMap
import scala.language.higherKinds

def sumSquare[F[_]: Monad](a: F[Int], b: F[Int]): F[Int] =
  a.flatMap(x => b.map(y => x*x + y*y))

import cats.instances.option._ // for Monad
import cats.instances.list._   // for Monad

sumSquare(Option(3), Option(4))
// res8: Option[Int] = Some(25)

sumSquare(List(1, 2, 3), List(4, 5))
// res9: List[Int] = List(17, 26, 20, 29, 25, 34)
----

.for-comprehension
[source,scala]
----
def sumSquare[F[_]: Monad](a: F[Int], b: F[Int]): F[Int] =
  for {
    x <- a
    y <- b
  } yield x*x + y*y

sumSquare(Option(3), Option(4))
// res10: Option[Int] = Some(25)

sumSquare(List(1, 2, 3), List(4, 5))
// res11: List[Int] = List(17, 26, 20, 29, 25, 34)
----

== 4.3 The Identity Monad
* 바로 이전에 다뤘던 sumSquare 메서드의 경우 모나드 인스턴스는 모두 잘 작동하지만, Int 와 같은 타입은 작동하지 않는다.
* Id 는 plain value 를 모나딕 메서드에서 사용할 수 있게 해준다.

[source,scala]
----
"Dave" : Id[String] // res3: cats.Id[String] = Dave

123 : Id[Int] // res4: cats.Id[Int] = 123

List(1, 2, 3) : Id[List[Int]] // res5: cats.Id[List[Int]] = List(1, 2, 3)


val a = Monad[Id].pure(3) // a: cats.Id[Int] = 3

val b = Monad[Id].flatMap(a)(_ + 1) // b: cats.Id[Int] = 4

import cats.syntax.functor._ // for map
import cats.syntax.flatMap._ // for flatMap

for {
  x <- a
  y <- b
} yield x + y
// res6: cats.Id[Int] = 7
----

== 4.4 Either
* Scala 2.11 까지는 Either 에 map, flatMap 메서드가 없었다. 하지만 2.12에는 생겼다.

=== 4.4.1 Left and Right Bias
* 스칼라 2.11 까지는 Either 에 map 또는 flatMap 메서드가 없어 for-comprehension을 이용하기 불편했다.

[source,scala]
----
val either1: Either[String, Int] = Right(10)
val either2: Either[String, Int] = Right(32)

for {
  a <- either1.right
  b <- either2.right
} yield a + b
// res0: scala.util.Either[String,Int] = Right(42)
----

* 스칼라 2.12는 map, flatMap을 지원한다.

[source,scala]
----
for {
  a <- either1
  b <- either2
} yield a + b
// res1: scala.util.Either[String,Int] = Right(42)
----

* 캐츠는 스칼라 2.11에서도 위와 같이 이용가능하도록 right-biased Either 를 사용가능하게 한다.

[source,scala]
----
import cats.syntax.either._ // for map and flatMap

for {
  a <- either1
  b <- either2
} yield a + b
----

=== 4.4.2 Creating Instances
* Left, Right 인스턴스를 바로 생성하기 위해 asLeft, asRight 익스텐션 메서드를 제공한다.

[source,scala]
----
import cats.syntax.either._ // for asRight

val a = 3.asRight[String]
// a: Either[String,Int] = Right(3)

val b = 4.asRight[String]
// b: Either[String,Int] = Right(4)

for {
  x <- a
  y <- b
} yield x*x + y*y
// res4: scala.util.Either[String,Int] = Right(25)
----

* 아래와 같이 사용하면 Right(0) 이 Either 타입이 아닌 Right 타입을 반환하기에 타입 미스매치 익셉션 발생한다.

[source,scala]
----
def countPositive(nums: List[Int]) =
  nums.foldLeft(Right(0)) { (accumulator, num) =>
    if(num > 0) {
      accumulator.map(_ + 1)
    } else {
      Left("Negative. Stopping!")
    }
  }
----

* 캐츠의 asRight 은 Either 를 반환해준다.

[source,scala]
----
def countPositive(nums: List[Int]) =
  nums.foldLeft(0.asRight[String]) { (accumulator, num) =>
    if(num > 0) {
      accumulator.map(_ + 1)
    } else {
      Left("Negative. Stopping!")
    }
  }

countPositive(List(1, 2, 3))
// res5: Either[String,Int] = Right(3)

countPositive(List(1, -2, 3))
// res6: Either[String,Int] = Left(Negative. Stopping!)
----

* 캐츠의 Either 동반객체는 catchOnly, catchNonFatal 같은 유용한 메서드를 제공한다.

[source,scala]
----
Either.catchOnly[NumberFormatException]("foo".toInt)
// res7: Either[NumberFormatException,Int] = Left(java.lang.NumberFormatException: For input string: "foo")

Either.catchNonFatal(sys.error("Badness"))
// res8: Either[Throwable,Nothing] = Left(java.lang.RuntimeException: Badness)

Either.fromTry(scala.util.Try("foo".toInt))
// res9: Either[Throwable,Int] = Left(java.lang.NumberFormatException: For input string: "foo")

Either.fromOption[String, Int](None, "Badness")
// res10: Either[String,Int] = Left(Badness)
----

=== 4.4.3 Transforming Eithers
* 또한 cats.syntax.either 에는 Either 인스턴스를 위한 유용한 메서드들을 제공한다.

[source,scala]
----
import cats.syntax.either._

"Error".asLeft[Int].getOrElse(0)
// res11: Int = 0

"Error".asLeft[Int].orElse(2.asRight[String])
// res12: Either[String,Int] = Right(2)


(-1).asRight[String].ensure("Must be non-negative!")(_ > 0)
// res13: Either[String,Int] = Left(Must be non-negative!)


"error".asLeft[Int].recover {
  case str: String => -1
}
// res14: Either[String,Int] = Right(-1)

"error".asLeft[Int].recoverWith {
  case str: String => Right(-1)
}
// res15: Either[String,Int] = Right(-1)


"foo".asLeft[Int].leftMap(_.reverse)
// res16: Either[String,Int] = Left(oof)

6.asRight[String].bimap(_.reverse, _ * 7)
// res17: Either[String,Int] = Right(42)

"bar".asLeft[Int].bimap(_.reverse, _ * 7)
// res18: Either[String,Int] = Left(rab)


123.asRight[String]
// res19: Either[String,Int] = Right(123)

123.asRight[String].swap
// res20: scala.util.Either[Int,String] = Left(123)
----

=== 4.4.4 Error Handling
* Either는 일반적으로 fail-fast 에러 핸들링에 이용된다. 그리고 우린 순차적 처리를 위해 flatMap을 자주 이용한다. 만약 계산 중 오류가 발생한 경우 나머지를 처리하지 않는다.

[source,scala]
----
for {
  a <- 1.asRight[String]
  b <- 0.asRight[String]
  c <- if(b == 0) "DIV0".asLeft[Int]
       else (a / b).asRight[String]
} yield c * 100
// res21: scala.util.Either[String,Int] = Left(DIV0)
----

* Either를 이용할 경우 에러를 어떤 타입으로 표현할건지를 고민해야한다. 대표적으로 아래와 같이 이용할 수 있다.

[source,scala]
----
type Result[A] = Either[Throwable, A]
----

* 하지만 위와 같이 이용할 경우 너무 범용적 타입이여서 핸들링 하기 쉽지 않다. 아래는 ADT(algbraic data type) 를 이용하는 방식이다.

[source, scala]
----
sealed trait LoginError extends Product with Serializable
final case class UserNotFound(username: String) extends LoginError
final case class PasswordIncorrect(username: String) extends LoginError
case object UnexpectedError extends LoginError


case class User(username: String, password: String)

type LoginResult = Either[LoginError, User]


// Choose error-handling behaviour based on type:
def handleError(error: LoginError): Unit =
  error match {
    case UserNotFound(u) =>
      println(s"User not found: $u")

    case PasswordIncorrect(u) =>
      println(s"Password incorrect: $u")

    case UnexpectedError =>
      println(s"Unexpected error")
  }

val result1: LoginResult = User("dave", "passw0rd").asRight
// result1: LoginResult = Right(User(dave,passw0rd))

val result2: LoginResult = UserNotFound("dave").asLeft
// result2: LoginResult = Left(UserNotFound(dave))

result1.fold(handleError, println)
// User(dave,passw0rd)

result2.fold(handleError, println)
// User not found: dave
----

== 4.5 Aside: Error Handling and MonadError
* 캐츠는 에러를 핸들링 하기 위해 Either와 유사한 MonadError 라는 타입 클래스를 제공한다.

=== 4.5.1 The MonadError Type Class

.MonadError 정의(심플버전)
[source,scala]
----
package cats

trait MonadError[F[_], E] extends Monad[F] {
  // Lift an error into the `F` context:
  def raiseError[A](e: E): F[A]

  // Handle an error, potentially recovering from it:
  def handleError[A](fa: F[A])(f: E => A): F[A]

  // Test an instance of `F`,
  // failing if the predicate is not satisfied:
  def ensure[A](fa: F[A])(e: E)(f: A => Boolean): F[A]
}
----

.Either를 이용하는 MonadError 예제
[source,scala]
----
import cats.MonadError
import cats.instances.either._ // for MonadError

type ErrorOr[A] = Either[String, A]

val monadError = MonadError[ErrorOr, String]
----

=== 4.5.2 Raising and Handling Errors
.raiseError 메서드는 Monad except의 pure 메서드이다.
[source,scala]
----
monadError.handleError(failure) {
  case "Badness" =>
    monadError.pure("It's ok")

  case other =>
    monadError.raiseError("It's not ok")
}
// res2: ErrorOr[ErrorOr[String]] = Right(Right(It's ok))
----

.ensure는 filter와 비슷한 행위를 한다.
[source,scala]
----
import cats.syntax.either._ // for asRight

monadError.ensure(success)("Number too low!")(_ > 1000)
// res3: ErrorOr[Int] = Left(Number too low!)
----

* raisedError, handleError 는 cats.syntax.applicativeError에서, ensure는 cats.syntax.monadError 에서 syntax 를 제공한다.
[source,scala]
----
import cats.syntax.applicative._      // for pure
import cats.syntax.applicativeError._ // for raiseError etc
import cats.syntax.monadError._       // for ensure

val success = 42.pure[ErrorOr]
// success: ErrorOr[Int] = Right(42)

val failure = "Badness".raiseError[ErrorOr, Int]
// failure: ErrorOr[Int] = Left(Badness)

success.ensure("Number to low!")(_ > 1000)
// res4: Either[String,Int] = Left(Number to low!)
----

=== 4.5.3 Instances of MonadError
* 캐츠는 MonadError 인스턴스로 Either, Future, Try 타입에 대해 제공된다.

[source,scala]
----
import scala.util.Try
import cats.instances.try_._ // for MonadError

val exn: Throwable =
  new RuntimeException("It's all gone wrong")

exn.raiseError[Try, Int]
// res6: scala.util.Try[Int] = Failure(java.lang.RuntimeException: It's all gone wrong)
----

== 4.6 The Eval Monad
* cats.Eval 은 평가를 어떻게 수행할지에 대해 다룬다. 일반적으로 eager, lazy 하게 평가되며, Eval은 결과를 memoized 할지를 다룬다.

=== 4.6.1 Eager, Lazy, Memoized, Oh My!
* eager는 즉시 평가를, lazy는 억세스시에 평가를, memoized는 첫번째 억세스시에만 평가 후 그 데이터를 캐시한다.

.스칼라의 val은 eager, memoized 하다.
[source, scala]
----
val x = {
  println("Computing X")
  math.random
}
// Computing X
// x: Double = 0.32119158749503807

x // first access
// res0: Double = 0.32119158749503807

x // second access
// res1: Double = 0.32119158749503807
----

.반면 def는 lazy, not memoized 하다.
[source,scala]
----
def y = {
  println("Computing Y")
  math.random
}
// y: Double

y // first access
// Computing Y
// res2: Double = 0.5179245763430056

y // second access
// Computing Y
// res3: Double = 0.8657077812314633
----

=== 4.6.3 Eval as a Monad
* Eval은 모든 모나드가 그렇듯 map, flatMap을 이용해 체인에 계산을 추가한다.

[source,scala]
----
val greeting = Eval.
  always { println("Step 1"); "Hello" }.
  map { str => println("Step 2"); s"$str world" }
// greeting: cats.Eval[String] = cats.Eval$$anon$8@3a67c76e

greeting.value
// Step 1
// Step 2
// res15: String = Hello world

val greeting2 = Eval.
  now { println("Step 1"); "Hello" }.
  map { str => println("Step 2"); s"$str world" }
// Step 1
// greeting: cats.Eval[String] = cats.Eval$$anon$8@3a67c76e

greeting.value
// Step 2
// res15: String = Hello world
----

* Eval은 memoize 메서드를 제공한다. 이는 한번 계산된 결과를 보존한다.

[source,scala]
----
val saying = Eval.
  always { println("Step 1"); "The cat" }.
  map { str => println("Step 2"); s"$str sat on" }.
  memoize.
  map { str => println("Step 3"); s"$str the mat" }
// saying: cats.Eval[String] = cats.Eval$$anon$8@7a0389b5

saying.value // first access
// Step 1
// Step 2
// Step 3
// res18: String = The cat sat on the mat

saying.value // second access
// Step 3
// res19: String = The cat sat on the mat
----

=== 4.6.4 Trampolining and Eval.defer
* Eval의 map, flatMap 메서드는 trampolined 하다. 이는 스택프레임을 차지하지 않아 "stack safety" 하다.

.재귀 호출을 이용한 factorial 계산 > stackoverflow 발생
[source,scala]
----
def factorial(n: BigInt): BigInt =
  if(n == 1) n else n * factorial(n - 1)

factorial(50000)
// java.lang.StackOverflowError
----

.Eval과 Eval.defer 를 이용한 스택에 안전한 재귀 호출
[source,scala]
----
def factorial(n: BigInt): Eval[BigInt] =
  if(n == 1) {
    Eval.now(n)
  } else {
    Eval.defer(factorial(n - 1).map(_ * n))
  }

factorial(50000).value
// res20: BigInt = 3347320509597...
----

* Eval은 스택안전함을 강제할때 유용하다. 하지만 이는 스택의 내용을 힙으로 옮김에 불과하기 때문에 아주 큰 데이터를 다룰땐 유의해야한다.

=== 4.6.5 Exercise: Safer Folding using Eval
* 네이티브 foldRight는 스택에 안전하지 않다. 이를 Eval을 활용하도록 변경하자

.native implementation of foldRight
[source,scala]
----
def foldRight[A, B](as: List[A], acc: B)(fn: (A, B) => B): B =
  as match {
    case head :: tail =>
      fn(head, foldRight(tail, acc)(fn))
    case Nil =>
      acc
  }
----

.using Eval
[source,scala]
----
def foldRightEval[A, B]
    (as: List[A], acc: Eval[B])(fn: (A, Eval[B]) => Eval[B]): Eval[B] =
  as match {
    case head :: tail =>
      Eval.defer(fn(head, foldRightEval(tail, acc)(fn)))
    case Nil =>
      acc
  }

def foldRight[A, B](as: List[A], acc: B)(fn: (A, B) => B): B =
  foldRightEval(as, Eval.now(acc)) { (a, b) =>
    b.map(fn(a, _))
  }.value

foldRight((1 to 100000).toList, 0L)(_ + _)
// res22: Long = 5000050000
----
