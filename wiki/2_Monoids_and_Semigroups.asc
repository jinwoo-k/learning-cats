= 2. Monoids and Semigroups

== 2.1 Definition of a Monoid
* 모노이드는 두 모노이드 타입 A를 결합하는 연산자 combine 과 identity 를 나타내는 엘리먼트 empty 가 필요하다.

[source, scala]
----
trait Monoid[A] {
  def combine(x: A, y: A): A
  def empty: A
}
----

* 대수적 법칙
** 결합법칙
** 항등법칙

.결합법칙
[source, scala]
----
def associativeLaw[A](x: A, y: A, z: A)(implicit m: Monoid[A]): Boolean = {
    m.combine(x, m.combine(y, z)) == m.combine(m.combine(x, y), z)
}
----

.항등법칙
[source, scala]
----
def identityLaw[A](x: A)(implicit m: Monoid[A]): Boolean = {
  (m.combine(x, m.empty) == x) && (m.combine(m.empty, x) == x)
}
----

== 2.2 Definition of a Semigroup
* 모노이드와 달리 empty가 정의되지 않음

[source,scala]
----
trait Semigroup[A] {
  def combine(x: A, y: A): A
}

trait Monoid[A] extends Semigroup[A] {
  def empty: A
}
----

== 2.3 Boolean 타입을 이용한 모노이드 구성
* And 연산을 하는 모노이드 booleanAndMonoid
 -  결합메서드는 And 연산, 항등메서드는 True 반환

[source,scala]
----
object Monoid {
  def apply[A](implicit monoid: Monoid[A]) =
    monoid
}

implicit val booleanAndMonoid: Monoid[Boolean] =
  new Monoid[Boolean] {
    def combine(a: Boolean, b: Boolean) = a && b
    def empty = true
  }
----

* Or 연산을 하는 모노이드 booleanOrMonoid
 -  결합메서드는 Or 연산, 항등메서드는 False 반환
* exclusive or 연산을 하는 모노이드 booleanXorMonoid
 - 결합메서드는 xor 연산, 항등메서드는 False 반환
* exclusive nor 연산을 하는 모노이드 booleanXnorMonoid
 - 결합메서드는 xnor 연산, 항등메서드는 True 반환

== 2.4 Set 을 위한 모노이드 구성
.두 셋을 합치는 setUnionMonoid
[source,scala]
----
implicit def setUnionMonoid[A]: Monoid[Set[A]] = new Monoid[Set[A]] {
    def combine(a: Set[A], b: Set[A]) = a union b
    def empty = Set.empty[A]
}
----

* Int 데이터 타입을 위의 모노이드에서 이용하기 위해 instance 생성

== 2.5 Monoids in cats

[source,scala]
----
import cats.Monoid
import cats.instances.string._

Monoid[String].combine("Hi ", "there!”)        // Hi there!
Monoid[String].empty

import cats.Semigroup
Semigroup[String].combine("Hi ", "there!2”) // Hi there2!

import cats.instances.int._
Monoid[Int].combine(32, 10)    // 42

import cats.instances.option._
Monoid[Option[Int]].combine(Some(1), Some(10))    // Some(11)
Monoid[Option[Int]].combine(Some(1), Option(10))    // Some(11)

import cats.syntax.semigroup._
"Hi " |+| "there!!"     // Hi there!
1 |+| 2     // 3
Option(1) |+| Some(2)     // Some(3)

Option.empty[Int] |+| Option(2)    // Some(2)

def add[A: Monoid](items: List[A]): A =
  items.foldLeft(Monoid[A].empty)(_ |+| _)

add(List(Option(1), Option(100)))    // Some(101)
add(List(Option.empty[Int]))            // None
add(List(Option(1), Some(2), Some(3)))    // Some(6)


case class Order(totalCost: Double, quantity: Double)

implicit val monoidOrder: Monoid[Order] = new Monoid[Order] {
  override def empty = Order(0, 0)

  override def combine(x: Order, y: Order) = Order(x.totalCost + y.totalCost, x.quantity + y.quantity)
}

add(List(Order(1, 100), Order(5, 200)))    // Order(6.0, 300.0)
----
