= 3. Functor

== 3.1 examples of Funtors
* 비공식적으로 functor 는 map메서드를 갖는 모든것이다.
* map은 내용을 순회하는 메서드가 아닌 transformation 메서드이며, context(Option, List, Either 등의)는 유지한다.

== 3.2 More Examples of Functors
* List, Option, Either 등의 데이터 타입에서는 즉각적인 평가가 이뤄지지만 Future 처럼 Lazy하게 평가가 이뤄지는 데이터 타입도 있다.
* Future
** Future 는 실행중, 완료, 거부(reject)의 세가지 상태를 가지며 map 메서드의 경우 '완료' 상태로 변경시 즉시 수행된다.
** Future는 reference transparency 를 충족하지 않아 순수함수형 프로그래밍시 좋지 않다.
* 단일 인자 함수
** single argument function 역시 functor 이다.

[source,scala]
----

val func1: Int => Double = (x: Int) => x.toDouble
val func2: Double => Double = (y: Double) => y * 2

(func1 andThen func2)(1) // composition using andThen // res8: Double = 2.0
func2(func1(1))          // composition written out by hand // res9: Double = 2.0
(func2 compose func1)(1)

import cats.instances.function._ // for Functor
import cats.syntax.functor._     // for map
//(func1 map func2)(1)     // composition using map > intellij does not compile this code! res7: Double = 2.0
----

* 위의 코드를 실행하기 위해선 스칼라 2.11.9 or 2.12.0-M5 이상을 사용해야 하며, sbt에 scalacOptions += "-Ypartial-unification" 구문을 추가해 가능하다. 자세한 내용은 다음 링크 참고 http://eed3si9n.com/herding-cats/partial-unification.html

== 3.3 Definition of a Functor

[source,scala]
----
package cats

import scala.language.higherKinds

trait Functor[F[_]] {
  def map[A, B](fa: F[A])(f: A => B): F[B]
}
----

* Functor laws
** identity: fa.map(a => a) == fa
** composition : fa.map(g(f(_))) == fa.map(f).map(g)


== 3.4 Aside: Higher Kinds and Type Constructors
```
List    // type constructor, takes one parameter
List[A] // type, produced using a type parameter
math.abs    // function, takes one parameter
math.abs(x) // value, produced using a value parameter

// Declare F using underscores:
// 스칼라에서는 type constructor 를 F[_] 와 같은 형식으로 선언한다.
def myMethod[F[_]] = {

  // Reference F without underscores:
  val functor = Functor.apply[F]

  // ...
}
```

* Higher kinded type 스칼라의 어드밴스드 피쳐이다. 이를 사용하기 아래의 절차가 필요하다.
** import scala.language.higherKinds
** sbt에 옵션 추가 scalacOptions += "-language:higherKinds"

== 3.5 Functors in Cats
* functor 를 모노이드와 같이 type class, instance, syntax 의 개념으로 나눠 살펴본다.

=== 3.5.1 The Functor Type Class

[source, scala]
----
import scala.language.higherKinds
import cats.Functor // type class
import cats.instances.list._   // for Functor
import cats.instances.option._ // for Functor

val list1 = List(1, 2, 3)  // list1: List[Int] = List(1, 2, 3)

val list2 = Functor[List].map(list1)(_ * 2)  // list2: List[Int] = List(2, 4, 6)

val option1 = Option(123)  // option1: Option[Int] = Some(123)

val option2 = Functor[Option].map(option1)(_.toString)  // option2: Option[String] = Some(123)
----

* Functor 는 A => B 를 F[A] => F[B] 로의 lift 메서드를 지원한다.

[source, scala]
----
val func = (x: Int) => x + 1
// func: Int => Int = <function1>

val liftedFunc = Functor[Option].lift(func)
// liftedFunc: Option[Int] => Option[Int] = cats.Functor$$Lambda$12952/101985314@120e192a

liftedFunc(Option(1))
// res0: Option[Int] = Some(2)
----

=== 3.5.2 Functor Syntax
* Scala의 List 또는 Option은 이미 map 이 구현돼있고, 자체구현된 map이 우선시 적용돼 시험하기가 힘들다.

.모든 Functor 에서 동작하는 메서드 구현
[source,scala]
----
def doMath[F[_]](start: F[Int])(implicit functor: Functor[F]): F[Int] =
  start.map(n => n + 1 * 2)

doMath(Option(20))  // res3: Option[Int] = Some(22)
doMath(List(1, 2, 3))  // res4: List[Int] = List(3, 4, 5)
----

.위와같은 결과를 낼 수 있게 돕는 extension method, cats.syntax.functor에 존재함
[source,scala]
----
implicit class FunctorOps[F[_], A](src: F[A]) {
  def map[B](func: A => B)(implicit functor: Functor[F]): F[B] =
    functor.map(src)(func)
}
----

=== 3.5.3 Instances for Custom Types
[source,scala]
----
final case class Box[A](value: A)

implicit val boxFunctor: Functor[Box] = new Functor[Box] {
  override def map[A, B](fa: Box[A])(f: A => B) =
    Box(f(fa.value))
}

val box = Box[Int](123)
box.map(value => value + 1)
----

* 때때로 커스톰 인스턴스를 Functor 의 인스턴스로 주입하고 싶을때가 있다. 예를들면 Future 의 ExecutionContext 가 그러하다.

[source,scala]
----
import scala.concurrent.{Future, ExecutionContext}

implicit def futureFunctor(implicit ec: ExecutionContext): Functor[Future] =
  new Functor[Future] {
    def map[A, B](value: Future[A])(func: A => B): Future[B] =
      value.map(func)
  }

val customExeuctionContext = ExecutionContext.Implicits.global
val newFutureFunctor =
  Functor[Future](futureFunctor(customExeuctionContext))
----

=== 3.5.4 Exercise: Branching out with Functors
[source,scala]
----
sealed trait Tree[+A]
final case class Branch[A](left: Tree[A], right: Tree[A]) extends Tree[A]
final case class Leaf[A](value: A) extends Tree[A]

implicit def treeFunctor: Functor[Tree] = new Functor[Tree] {
  override def map[A, B](fa: Tree[A])(f: A => B): Tree[B] = fa match {
    case Branch(l, r) =>  Branch(map(l)(f), map(r)(f))
    case Leaf(a) => Leaf(f(a))
  }
}

Tree.leaf(100).map(_ * 2) // invariant 이슈때문에 Leaf(100).map(_ * 2) 와 같은 방식으로 이용 불가
Tree.branch(Leaf(10), Leaf(20)).map(_ * 2)
----

== 3.6 Contravariant and Invariant Functors
* Contravariant : 체인의 앞에 변형을 추가
* Invariant : 양방향 체인 추가

=== 3.6.1 Contravariant Functors and the contramap Method
* contramap은 transformation 데이터 타입에만 적용된다. (Option은 적용 불가)

[source,scala]
----
trait Printable[A] {
  def format(value: A): String

  def contramap[B](func: B => A): Printable[B] =
    ???
}

def format[A](value: A)(implicit p: Printable[A]): String =
  p.format(value)
----

==== 3.6.1.1 Exercise: Showing off with Contramap
[source,python]
----
trait Printable[A] { self =>
  def format(value: A): String

  def contramap[B](func: B => A): Printable[B] =
    new Printable[B] {
      def format(value: B): String =
        self.format(func(value))
    }
}

def format[A](value: A)(implicit p: Printable[A]): String =
  p.format(value)

implicit val stringPrintable: Printable[String] =
  new Printable[String] {
    def format(value: String): String =
      "\"" + value + "\""
  }

implicit val booleanPrintable: Printable[Boolean] =
  new Printable[Boolean] {
    def format(value: Boolean): String =
      if(value) "yes" else "no"
  }

format("hello") // res7: String = "hello"
format(true)  // res8: String = yes

implicit def boxPrintable[A](implicit p: Printable[A]) =
  p.contramap[Box[A]](_.value)

format(new Box[String]("a"))  // res10: String = "a"
----

=== 3.6.2 Invariant functors and the imap method
* Invariant functors 는 map 과 contramap 이 결합된 형태인 imap 메서드를 제공한다.
* map은 체인의 뒤에 덧붙여 새로운 타입 클래스 인스턴스를 만들어내고, contramap은 체인 앞에 수행한다. imap은 양방향 변환을 통해 이 둘을 수행한다.
* 인코딩 / 디코딩 예가 이를 활용한 예로 들 수 있다.

[source,python]
----
trait Codec[A] {
  def encode(value: A): String
  def decode(value: String): A

  def imap[B](dec: A => B, enc: B => A): Codec[B] = {
    val self = this
    new Codec[B] {
      def encode(value: B): String =
        self.encode(enc(value))

      def decode(value: String): B =
        dec(self.decode(value))
    }
  }
}
def encode[A](value: A)(implicit c: Codec[A]): String =
  c.encode(value)

def decode[A](value: String)(implicit c: Codec[A]): A =
  c.decode(value)

implicit val stringCodec: Codec[String] =
  new Codec[String] {
    def encode(value: String): String = value
    def decode(value: String): String = value
  }

implicit val intCodec: Codec[Int] =
  stringCodec.imap(_.toInt, _.toString)

implicit val booleanCodec: Codec[Boolean] =
  stringCodec.imap(_.toBoolean, _.toString)


encode("string")      // res10: String = string
encode(10)            // res11: String = 10
decode[String]("10")  // res12: String = 10
decode[Int]("10")     // res13: Int = 10
decode[Boolean]("true") // res14: Boolean = true
----

== 3.7 Contravariant and Invariant in Cats
* cats.Contravariant 와 cats.Invariant 에 타입클래스로 제공한다.

[source,python]
----
trait Contravariant[F[_]] {
  def contramap[A, B](fa: F[A])(f: B => A): F[B]
}

trait Invariant[F[_]] {
  def imap[A, B](fa: F[A])(f: A => B)(g: B => A): F[B]
}
----

=== 3.7.1 Contravariant in Cats
[source,python]
----
import cats.Show
import cats.functor.Contravariant
import cats.instances.string._

val showString = Show[String]

val showSymbol = Contravariant[Show].
  contramap(showString)((sym: Symbol) => s"'${sym.name}")
showSymbol.show('dave) // by instance

import cats.syntax.contravariant._
showString.contramap[Symbol](_.name).show('dave)  // by syntex
----

=== 3.7.2 Invariant in Cats
* Cats 는 모노이드를 위한 invariant 를 제공한다.
* 아래 예는 String Monoid를 이용해 Symbol Monoid를 생성하는 예이다.

[source,python]
----
import cats.Monoid
import cats.implicits._

implicit val symbolMonoid: Monoid[Symbol] =
  Monoid[String].imap(Symbol.apply)(_.name)

Monoid[Symbol].empty
// res5: Symbol = '

'a |+| 'few |+| 'words
// res6: Symbol = 'afewwords
----
